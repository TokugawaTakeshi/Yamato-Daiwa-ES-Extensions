extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/Assets.japanese.pug
  include ../../../Components/Components.japanese.pug


block append Metadata

  -

    HTML_PAGE_LANGUAGE = "ja";
    HTML_PAGE_TITLE = buildHTML_PageTitle("利用開始");
    HTML_PageMetaData = {
      description: "「Yamato Daiwa ECMAScript extensions」ライブラリの利用開始に関する案内。" +
          "導入手順・容量・TypeScript無しの利用時の注意事項、機能のインポート。",
      author: HTML_PAGE_AUTHOR
    };

    FAVICON_URI = "@MustBeInPublicRoot/favicon";

    styleSheetsURIs = [ "@Shared/CommonStyles", "@Layouts/TwoColumns/TwoColumnsLayout", "@Shared/ExternalComponents" ];
    scriptsURIs.endOfBody = [ "@Common" ];

    RoutingEmulator.setCurrentRoute("coreLibrary.children.gettingStarted");

    LanguageDropDownList__YDF_DK.setLinks({
      [LanguageDropDownList__YDF_DK.supportedLanguages.english]: "./GetStartedWithCoreLibraryPage.english.html",
      [LanguageDropDownList__YDF_DK.supportedLanguages.russian]: "./GetStartedWithCoreLibraryPage.russian.html"
    });

    const externalLinks = {
      stackOverflow: {
        parametersValidationInTypeScript: "https://stackoverflow.com/q/73410742/4818123"
      }
    };


block append SpecificContent

  article

    h1.Article-Heading1 利用開始

    h2.Article-Heading2#Installation--SECTION 導入

    p.Article-Paragraph.
      導入手順は通常の方法であり、#[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.npm.top }).Article-Link  npm]
        #[+Term--YDID パッケージマネージャー]により実行。

    +CodeViewer--YDF({
      title: "パッケージを導入するコンソールコマンド"
    }).Article-CodeViewer
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Bash
      }) npm i @yamato-daiwa/es-extensions -E


    h2.Article-Heading2#DistributiveVolumeNotice--SECTION 配布容量関連

    p.Article-Paragraph.
      #[+Link--YDF({ unendorsedExternalURI: "sharedExternalLinks.npm.YDES_Extensions" }).Article-Link npm公式サイト]の
      #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.npm.YDES_Extensions }).Article-Link @yamato-daiwa/es-extensionsのページ]
        では、当パッケージの圧縮されていない状態の容量（「Unpacked Size」）が表示されている。
      例えば、バージョン#[+SecondaryEntity--YDID 1.5.8]の場合は698キロバイトである。

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/CoreLibrary/GettingStarted/Images/NPM_DistributiveVolumeExample",
      imageAlternateText: "「npm」の公式サイトにおける配布パッケージの容量の表示例。" +
          "注意点として、当パッケージの導入時に構成後の対象アプリケーションが表示容量通りにサイズ増加するとは限らない。"
    }).Article-SingleImageViewer

    +AttentionBox--YDF({
      decoration: AttentionBox__YDF.DecorativeVariations.guidance,
      hasPrependedSVG_Icon: true
    }).Article-AttentionBox.
      其れは、#[+ImportantEntity--YDID @yamato-daiwa/es-extensions]の導入に依って構成後アプリケーションに加わる容量#[+Keyword--YDID ではない]。

    p.Article-Paragraph.
      #[+Keyword--YDID 多くの]容量は、#[+Term--YDID ECMAScriptモジュール]（ブラウザーのアプリケーションにとって最適）と#[+Term--YDID CommonJSモジュール]
        （Node.jsにとって規定）で占められている。
      此の様に上記の中からどのモジュールを選んでも、多くのファイルは無視される。

    p.Article-Paragraph.
      サーバ・コンソールNode.jsアプリケーションの場合、数千キロバイト程度の増加は大した問題ではない。
      だが、#[+Term--YDID ブラウザーアプリケーション]であれば#[+Term__Contrast--YDID プロジェクト構成手段]を用いて、#[+Term--YDID 納品用構成]から
        ライブラリで使われなかった機能を除外する事が重要だ。

    p.Article-Paragraph.
      #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.webpack.top }).Article-Link Webpack]の場合、此の機能は
        #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.webpack.treeShaking }).Article-Link 「Tree shaking」]と呼ぶ。
      納品版構成モードで此れを有効化するには、
        #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.typescript.configurationReference }) TypeScript設定]
        で#[+ImportantEntity--YDID ES系]のモジュールを指定しなければいけない。
      二つ目の条件、即ち依存性が有る#[+ImportantEntity--YDID package.json]の#[+ImportantEntity__Code--YDID sideEffects: false]の
        指定は、#[+ImportantEntity--YDID @yamato-daiwa/es-extensions]に依って満たされている。
      #[+ImportantEntity--YDID Webpack]と競合する#[+Term--YDID プロジェクト構成手段]を使っている場合、
        此の手段は似たような未使用機能の除外に対応しなければいけない。

    +AttentionBox--YDF({
      decoration: AttentionBox__YDF.DecorativeVariations.guidance,
      hasPrependedSVG_Icon: true
    }).Article-Paragraph.
      ライブラリの未使用機能を可能な限り多く除外する為に、#[+ImportantEntity--YDID @yamato-daiwa/es-extensions]の多くの機能は
        #[+Term--YDID クラス]#[+Keyword--YDID ではなく]#[+Term--YDID 関数]で実装された（#[+Term--YDID クラス]の機能も少し有る）。
      尚関数は、#[+Keyword--YDID 他の]関数を使っている場合に此の#[+Term--YDID 推移依存性]も構成に入るが、それでも実質的な最適化は入る。
        特に、ライブラリのごく一部分のみ使われている様な場合だ。


    h2.Article-Heading2#NonTypeScriptUsageWarning--SECTION TypeScriptの非利用者に対する注意事項

    p.Article-Paragraph.
      我々のライブラリ開発は、#[+Keyword--YDID 優先目標として]#[+ImportantEntity--YDID TypeScript]利用者の補助を優先している。
      其の理由は、先ず開発者の#[+ImportantEntity__Code--YDID JavaScript]言語に対する評価であり、曰く
        「JavaScriptは実用性の有る商業アプリケーションやウェブサイト等の高品質開発には向いていない言語」。
      然し#[+ImportantEntity--YDID TypeScript]であれば話は全く違ってくる。完成した#[+Term--YDID オブジェクト指向プログラミング]の対応、
        非常にフレキシブルな#[+Term--YDID タイピング]及びブラウザー専用JavaScriptだけでなく、#[+ImportantEntity--YDID Node.js]への
        #[+Term--YDID トランスパイリング]は#[+Keyword--YDID 根本的に]流れを変える。

    p.Article-Paragraph.
      #[+Keyphrase--YDID #[+ImportantEntity--YDID TypeScript]のコンパイルエラー]が無ければ、当ライブラリ関連で問題が発生する可能性は低い。
      然し、当ライブラリを#[+ImportantEntity--YDID JavaScript]利用者が使う事も予想される。


    p.Article-Paragraph.
      ソースコードを#[+ImportantEntity--YDID JavaScript]へ変換する際、#[+ImportantEntity--YDID TypeScript]#[+Term--YDID トランスパイラ]
        は新規機能の中に何も追加#[+Keyword--YDID しない]。
      特に#[+Keyphrase--YDID #[+ImportantEntity--YDID TypeScript]のソースコード上で指定された関数・メソッドの引数の型確認が、JavaScript上では実行されない]。
      其の上で、仮に#[+ImportantEntity--YDID JavaScript]への対応課題として、関数・メソッドの引数の型の確認をしっかり実装する必要が有った。
      此の実装は一見大したコード量には見えなさそうだが、事実上、関数等でコード量が#[+Keyphrase--YDID 数倍に膨れ上がると言っても過言ではない]
        （#[+Link--YDF({ unendorsedExternalURI: externalLinks.stackOverflow.parametersValidationInTypeScript }).Article-Link 具体例を参照])。

    p.Article-Paragraph.
      様々な情報を収集、分析した結果、引数の完成後の妥当性確認は実装しない事と成った。
      主な理由としては、ライブラリの全体的な容量の急増、かつ多数の関数等の#[+Term--YDID 推移依存性]の急増が懸念され、それはキロバイト数を厳格に節約しなければならない
        ブラウザーアプリケーションにとって無視出来ない問題だからだ。
      と言う事は、#[+ImportantEntity--YDID TypeScript]ではなく#[+ImportantEntity--YDID JavaScript]で当ライブラリを使う場合、
        型不整合関連エラーが発生する可能性が高い。だがエラーメッセージから原因が判明するとは限らず、「ライブラリのせいだ」等と誤解される事態も予想される。


    h2.Article-Heading2#ImportingOfFunctionality--SECTION 機能のインポート

    p.Article-Paragraph.
      当パッケージの導入後に、本説明用ページで紹介されている関数やクラス等のインポートが可能と成る。
      標準のインポート方法は、#[+ImportantEntity__Code--YDID import]#[+Term--YDID キーワード]をサポートしているランタイムやプロジェクト構成手段
        の場合なら、例えば以下の様に行う。

    +CodeViewer--YDF({
      title: "「@yamato-daiwa/es-extensions」からのインポートの例"
    }).Article-CodeViewer
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }) import { addElementsToArray, removeNthCharacter } from "@yamato-daiwa/es-extensions";
