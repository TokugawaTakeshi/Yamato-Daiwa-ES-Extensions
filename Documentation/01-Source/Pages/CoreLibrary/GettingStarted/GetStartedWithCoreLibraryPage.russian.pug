extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    HTML_PAGE_LANGUAGE = "ru";
    HTML_PAGE_TITLE = buildHTML_PageTitle("Начало использования");
    HTML_PageMetaData = {
      description: "Начало работы с библиотекой &quot;Yamato Daiwa ECMAScript extensions&quot; (сокращённо: &quot;YDEE&quot;):, " +
        `установка, заметка об объёме дистибутива, предупреждение об использовании без TypeScript, импорт зависимостей.`,
      author: HTML_PAGE_AUTHOR
    };

    FAVICON_URI = "@MustBeInPublicRoot/favicon";

    styleSheetsURIs = [ "@Shared/CommonStyles", "@Layouts/TwoColumns/TwoColumnsLayout", "@Shared/ExternalComponents" ];
    scriptsURIs.endOfBody = [ "@Common" ];

    RoutingEmulator.setCurrentRoute("coreLibrary.children.gettingStarted");

    LanguageDropDownList__YDF_DK.setLinks({
      english: "./GetStartedWithCoreLibraryPage.english.html",
      japanese: "./GetStartedWithCoreLibraryPage.japanese.html"
    });

    const externalLinks = {
      stackOverflow: {
        parametersValidationInTypeScript: "https://ru.stackoverflow.com/q/1464837/193415"
      }
    };


block append HeadScriptsLinks

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    h1.Article-Heading1 Начало использования

    h2.Article-Heading2(
      id= localizedRouting.coreLibrary.$children.gettingStarted.$sectioning.installation.$anchor
    ) Установка

    p.Article-Paragraph.
      Процедура установки стандартная, с помощью #[+Term--YDID пакетного менеджера]
        #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.npm.top }).Article-Link  npm].

    +CodeViewer--YDF({
      title: "Консольная команда установки пакета"
    })
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Bash
      }) npm i @yamato-daiwa/es-extensions -E


    h2.Article-Heading2(
      id= localizedRouting.coreLibrary.$children.gettingStarted.$sectioning.distributiveVolumeNotice.$anchor
    ) Об объёме дистибутива

    p.Article-Paragraph.
      На #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.npm.YDES_Extensions }).Article-Link странице @yamato-daiwa/es-extensions]
        #[+Link--YDF({ unendorsedExternalURI: "sharedExternalLinks.npm.YDES_Extensions" }).Article-Link официального сайта npm]
        можно видеть объём пакета ("Unpacked Size").
      Например, для версии #[+SecondaryEntity--YDID 1.5.8] это было 698 килобайт:

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/CoreLibrary/GettingStarted/Images/NPM_DistributiveVolumeExample",
      imageAlternateText: "Пример отображения объёма дистрибутива пакета на официальном сайте пакетного менеджера npm. " +
          "Важно, что отображающийся объём не всегда соответствует тому объёму, на который после сборки увеличится приложение, " +
          "использующее данный пакет.",
      autoAspectRatioByYDA: true
    }).Article-SingleImageViewer

    +AttentionBox--YDF({
      decoration: AttentionBox__YDF.DecorativeVariations.guidance, hasPrependedSVG_Icon: true
    }).
      Это #[+Keyword--YDID не] объём, на который увеличится Ваше приложение после подключения пакета и сборки приложения.

    p.Article-Paragraph.
      Основной объём дистрибутива занимают набор #[+Term--YDID ECMAScript-модулей] (оптимальны для браузерных приложений)
        и #[+Term--YDID CommonJS-модулей] (актуальные по умолчанию для Node.js приложений).
      Таким образом, какой бы тип модулей из этих двух не использовался, значительная часть файлов будут проигнорирована.

    p.Article-Paragraph.
      Объём в несколько сотен килобайт для серверных и консольных Node.js-приложений незначителен в большинстве случаев.
      Что касается браузерных приложений, то здесь важно обеспечить устранение неиспользуемой функциональности из
        #[+Term--YDID продакшен-сборки] с помощью сборщика проектов.

    p.Article-Paragraph.
      В #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.webpack.top }).Article-Link Webpack] эта функциональность
        называется　#[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.webpack.treeShaking }).Article-Link Tree shaking].
      Для её активации в режиме продакшен необходимо в
        #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.typescript.configurationReference }) настойках TypeScript]
        указать тип модулей группы #[+ImportantEntity--YDID ES].
      Второе условие срабатывания этой функциональности - наличие
        #[+ImportantEntity__Code--YDID sideEffects: false] в #[+ImportantEntity--YDID package.json]
        зависимости - со стороны #[+ImportantEntity--YDID @yamato-daiwa/es-extensions] выполнено.
      Если Вы используете другой сборщик проектов, называющий себя конкурентом #[+SecondaryEntity--YDID Webpack],
        то он также обязан поддерживать аналогичную функциональность.

    +AttentionBox--YDF({
      decoration: AttentionBox__YDF.DecorativeVariations.guidance,
      hasPrependedSVG_Icon: true
    }).
      Для того, чтобы было отсечено как можно больше неиспользуемой функциональности библиотеки, большая часть
        #[+ImportantEntity--YDID @yamato-daiwa/es-extensions] реализована в виде #[+Term--YDID функций]
        (а не #[+Term--YDID классов], хотя #[+Term--YDID классы] тоже имеются).
      В случае, если одни функции используют другие, в сборку также войдут эти #[+Term--YDID транзитивные зависимости],
        но даже при таком раскладе оптимизация будет очень хорошей, особенно используется меньшая часть возможностей библиотеки.

    h2.Article-Heading2(
      id= localizedRouting.coreLibrary.$children.gettingStarted.$sectioning.nonTypeScriptUsageWarning.$anchor
    ) Предупреждение об использовании без TypeScript

    p.Article-Paragraph.
      Библиотека разрабатывается в первую очередь для пользователей #[+ImportantEntity--YDID TypeScript].
      Связано это прежде всего с отношением главного разработчика к #[+ImportantEntity--YDID JavaScript]: он считает, что
        данный язык непригоден для #[+Keyword--YDID высококачественной] #[+Keyword__Contrast--YDID коммерческой]
        разработки сайтов и приложений.
      Однако к #[+ImportantEntity__Code--YDID TypeScript] отношение #[+Keyphrase--YDID совсем иное] -
        из-за #[+Keyword--YDID полноценного] #[+Term--YDID объектно-ориентированного программирования], крайне гибкой
        типизации и возможности транспайлинга не только в браузерный JavaScript, но и в #[+ImportantEntity--YDID Node.js].

    p.Article-Paragraph.
      #[+Keyphrase--YDID При отсутствии ошибок компиляции #[+ImportantEntity--YDID TypeScript]] вероятность возникновения
        проблем с данной библиотекой низка.
      Тем не менее, ожидаются пользователи #[+ImportantEntity--YDID JavaScript], которые захотят использовать данную библиотеку.

    p.Article-Paragraph.
      Транспилируя исходный код в #[+ImportantEntity--YDID JavaScript], транспайлер #[+ImportantEntity--YDID TypeScript]
        #[+Keyword--YDID не] добавляет #[+Keyword--YDID никакой] новой функциональности, в частности
        #[+Keyphrase--YDID не добавляется валидация параметров функций/методов] в соответствии с указанными в исходном
        #[+ImportantEntity--YDID TypeScript] коде типами.
      Поэтому, если бы была задача поддерживать #[+ImportantEntity--YDID JavaScript], то необходимо было провести
        тщательную валидацию всех входных параметров и подробно логировать все нарушения.
      На первый взгляд это может показаться незначительным увеличением кода, но на самом деле объём функций таким образом
        может вырасти #[+Keyword--YDID в разы], и #[+Keyphrase--YDID это не преувеличение]
        (см. #[+Link--YDF({ unendorsedExternalURI: externalLinks.stackOverflow.parametersValidationInTypeScript }).Article-Link конкретный пример]).

    p.Article-Paragraph.
      После сбора информации было принято решение отказаться от реализации исчерпывающей валидации параметров.
      Основной причиной является резкое увеличение объёма библиотеки и транзитивных зависимостей большинства модулей в
        несколько раз, #[+Keyphrase--YDID что критично для браузерных приложений], где каждый килобайт на счету.
      Это значит, что при использовании #[+ImportantEntity--YDID JavaScript] и наличии в коде ошибок, связанных с неверным
        типом параметра возможно возникновение ошибок выполнения #[+ImportantEntity--YDID JavaScript],
        однако #[+Keyphrase--YDID из сообщения об ошибке это не будет очевидно], а потому возникновение ошибки
        может быть ошибочно расценено как баг библиотеки.


    h2.Article-Heading2(
      id= localizedRouting.coreLibrary.$children.gettingStarted.$sectioning.importingOfFunctionality.$anchor
    ) Импорт функциональности

    p.Article-Paragraph.
      После того, как пакет установлен, становится возможным импорт любых функций, классов и т. д., упомянутых в данной
        документации.
      Способ импорта - стандартный.
      Для сборщиков проекта или рантаймов, поддерживающих ключевое слово #[+ImportantEntity__Code--YDID import] это будет,
        например,

    +CodeViewer--YDF({
      title: "Пример импортов из @yamato-daiwa/es-extensions"
    })
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }) import { addElementsToArray, removeNthCharacter } from "@yamato-daiwa/es-extensions";
