extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("Getting Started"),
        description:
            "Для начала работы с библиотекой «Yamato Daiwa ES extensions» (сокращённо: «YDEE») её необходимо установить " +
              "с помощью пакетного менеджера «npm» (имя пакета: «@yamato-daiwa/es-extensions»)."
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("coreLibrary.gettingStarted");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.coreLibrary.$children.gettingStarted.$URI,
      japanese: routing.japanese.coreLibrary.$children.gettingStarted.$URI
    });

    const {
      $sectioning: localizedSectioning,
      $heading: topHeading
    } = localizedRouting.coreLibrary.$children.gettingStarted;

    const externalLinks = {
      stackOverflow: {
        parametersValidationInTypeScript: "https://ru.stackoverflow.com/q/1464837/193415"
      }
    };


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ Начало использования ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 1,
      text: localizedRouting.coreLibrary.$children.gettingStarted.$heading
    }).Article-Heading1

    //- ━━━ Установка ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.installation.$heading,
      HTML_ID: localizedSectioning.installation.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      Процедура установки стандартная, с помощью #[+Term--YDID пакетного менеджера]
        #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.npm.top }).Article-Link npm].

    +CodeViewer--YDF({
      title: "Консольная команда установки пакета"
    })
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Bash
      }) npm i @yamato-daiwa/es-extensions -E


    //- ━━━ Заметка об объёме дистрибутива ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.distributiveVolumeNotice.$heading,
      HTML_ID: localizedSectioning.distributiveVolumeNotice.$anchor
    }).Article-Heading2

    p.Article-Paragraph
      | На
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.npm.YDES_Extensions
      }).Article-Link странице @yamato-daiwa/es-extensions
      |
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.npm.top
      }).Article-Link официального сайта npm
      |
      |   отображается объём #[+Term--YDID пакета] («Unpacked Size»).
      | Например, для версии #[+SecondaryEntity--YDID 1.5.8] это было 698 килобайт:

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/CoreLibrary/GettingStarted/Images/NPM_DistributiveVolumeExample",
      imageAlternateText:
          "Пример отображения объёма дистрибутива пакета на официальном сайте пакетного менеджера «npm». " +
          "В случае с пакетом «Yamato Daiwa ES extensions», после его установки при правильной настройке сборщика " +
            "проекта объём выходных файлов не увеличится на указанный объём дистрибутива.",
      autoAspectRatioByYDA: true,
      maximalHeight__anyValidCSS_Value: "450px"
    })

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.guidance, SVG_Icon: true }).
      #[+Keyphrase--YDID В случае с #[+ImportantEntity--YDID @yamato-daiwa/es-extensions]], это
        #[+Keyword--YDID не]&nbsp;объём #[+Keyword--YDID выходного] #[+Term--YDID JavaScript-кода], на который увеличится
        объём выходных файлов после подключения данного #[+Term--YDID пакета] и сборки проекта.

    p.Article-Paragraph.
      Основной объём дистрибутива занимают набор #[+Term--YDID ECMAScript-модулей] (оптимальны для
        #[+Term--YDID браузерных приложений])　и #[+Term--YDID CommonJS-модулей] (актуальные по #[+Keyword--YDID умолчанию]
        для #[+Term--YDID Node.js-приложений]).
      Таким образом, какой бы тип #[+Term--YDID модулей] из этих двух не&nbsp;использовался, #[+Keyword--YDID значительная]
        часть файлов будут #[+Keyword--YDID проигнорирована].

    p.Article-Paragraph.
      Объём в несколько сотен килобайт
        #[+Keyphrase--YDID для #[+Term--YDID серверных] и #[+Term--YDID консольных Node.js-приложений]]
        #[+Keyword--YDID незначителен] #[+Keyphrase--YDID в большинстве случаев].
      Что касается #[+Term--YDID браузерных приложений], то здесь важно обеспечить #[+Keyword--YDID устранение]
        #[+Keyword__Contrast--YDID неиспользуемой] функциональности из #[+Term--YDID продакшен-сборки] с помощью
        #[+Term--YDID сборщика проектов].

    p.Article-Paragraph
      | В #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.webpack.top }).Article-Link Webpack] такая
      |   функциональность называется
      |   #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.webpack.treeShaking }).Article-Link «Tree shaking»].
      | Для её активации #[+Keyphrase--YDID в режиме «продакшен»] необходимо в
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.typescript.configurationReference
      }).Article-Link настройках TypeScript
      |
      |   указать тип #[+Term--YDID модулей] группы #[+ImportantEntity--YDID ES].
      | Второе условие срабатывания этой функциональности — наличие #[+ImportantEntity__Code--YDID sideEffects: false] в
      |   #[+ImportantEntity--YDID package.json] #[+Keyword--YDID зависимости] — со стороны
      |   #[+ImportantEntity--YDID @yamato-daiwa/es-extensions] выполнено.
      | Если Вы используете другой #[+Term--YDID сборщик проектов], заявленный как конкурент
      |   #[+SecondaryEntity--YDID Webpack], то он обязан поддерживать функциональность, аналогичную
      |   #[+Term--YDID three shaking] у #[+Term--YDID Webpack].

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.guidance, SVG_Icon: true }).
      Для того, чтобы было отсечено как можно больше неиспользуемой функциональности библиотеки, бо&#x301;льшая часть
        #[+ImportantEntity--YDID @yamato-daiwa/es-extensions] реализована в виде #[+Term--YDID функций]
        (а не&nbsp;#[+Term--YDID классов], хотя #[+Term--YDID классы] тоже имеются).
      В случае, если одни #[+Term--YDID функции] используют другие, в сборку также войдут эти
        #[+Term--YDID транзитивные зависимости], но даже при таком раскладе оптимизация будет очень хорошей,
        особенно если используется меньшая часть возможностей библиотеки.


    //- ━━━ Предупреждение об использовании без TypeScript ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.nonTypeScriptUsageWarning.$heading,
      HTML_ID: localizedSectioning.nonTypeScriptUsageWarning.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      Библиотека разрабатывается #[+Keyphrase--YDID в первую очередь для пользователей #[+ImportantEntity--YDID TypeScript]].
      Связано это прежде всего с отношением главного разработчика к #[+ImportantEntity--YDID JavaScript]: он считает, что
        данный язык #[+Keyword--YDID непригоден] для современной #[+Keyword__Contrast--YDID высококачественной]
        #[+Keyword--YDID коммерческой] разработки сайтов и приложений.
      Однако к #[+ImportantEntity__Code--YDID TypeScript] отношение #[+Keyword--YDID совершенно]
        #[+Keyword__Contrast--YDID другое] — из-за #[+Keyword--YDID полноценного]
        #[+Term--YDID объектно-ориентированного программирования], крайне гибкой
        #[+Term--YDID типизации] и возможности #[+Term--YDID транспайлинга] не&nbsp;только в
        #[+Term--YDID браузерный JavaScript], но и в #[+ImportantEntity--YDID Node.js].

    p.Article-Paragraph.
      #[+Keyphrase--YDID При отсутствии ошибок проверки типов #[+ImportantEntity--YDID TypeScript]-ом] вероятность
        возникновения проблем с данной библиотекой низка.
      Тем не&nbsp;менее, ожидаются пользователи #[+ImportantEntity--YDID JavaScript], которые захотят использовать
        данную библиотеку.

    p.Article-Paragraph
      | Преобразуя исходный код в #[+ImportantEntity--YDID JavaScript], #[+Term--YDID транспайлер]
      |   #[+ImportantEntity--YDID TypeScript] #[+Keyword--YDID не]&nbsp;добавляет #[+Keyword--YDID никакой] новой
      |   функциональности, в частности
      |   #[+Keyphrase--YDID не&nbsp;добавляется валидация #[+Term--YDID параметров] #[+Term__Contrast--YDID функций/методов]]
      |   в соответствии с указанными в исходном #[+ImportantEntity--YDID TypeScript]-коде #[+Term--YDID типами].
      | Поэтому, если бы была задача поддерживать #[+ImportantEntity--YDID JavaScript], то необходимо было провести
      |   тщательную валидацию #[+Keyword--YDID всех] #[+Term--YDID параметров] и подробно логировать все нарушения.
      | На первый взгляд это может показаться незначительным увеличением кода, но на самом деле объём кода
      |   #[+Term--YDID функций] таким образом может вырасти #[+Keyphrase--YDID в разы, это не&nbsp;преувеличение] (
      +Link--YDF({
        unendorsedExternalURI: externalLinks.stackOverflow.parametersValidationInTypeScript
      }).Article-Link конкретный пример
      | ).

    p.Article-Paragraph.
      После сбора информации было принято решение отказаться от реализации исчерпывающей валидации #[+Term--YDID параметров].
      Основной причиной является резкое увеличение объёма библиотеки и #[+Term--YDID транзитивных зависимостей] большинства
        #[+Term--YDID модулей] #[+Keyphrase--YDID в несколько раз], что
        #[+Keyphrase--YDID критично для браузерных приложений], где каждый #[+Term--YDID килобайт] на счету.
      Это значит, что при использовании #[+ImportantEntity--YDID JavaScript] и наличии в коде ошибок, связанных с неверными
        типами #[+Term--YDID параметров] возможно возникновение ошибок выполнения #[+ImportantEntity--YDID JavaScript],
        однако #[+Keyphrase--YDID из сообщения об ошибке причина&nbsp;не будет очевидна], потому возникновение подобной
        ошибки может быть #[+Keyword--YDID неверно] диагностировано как баг библиотеки.


    //- ━━━ Импорт функциональности ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.importingFunctionality.$heading,
      HTML_ID: localizedSectioning.importingFunctionality.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      После того, как #[+Term--YDID npm-пакет] установлен, становится возможным #[+Term--YDID импорт] любых
        #[+Term--YDID функций], #[+Term--YDID классов] и другой функциональности, упомянутой в данной документации.
      Способ #[+Term--YDID импорта] — стандартный.
      Для #[+Term--YDID сборщиков проектов] или #[+Term--YDID рантаймов], поддерживающих
        #[+Term__Contrast--YDID ключевое слово] #[+ImportantEntity__Code--YDID import] это будет, например,

    +CodeViewer--YDF({ title: "Пример импортов из @yamato-daiwa/es-extensions" })
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }) import { addElementsToArray, removeNthCharacter } from "@yamato-daiwa/es-extensions";
