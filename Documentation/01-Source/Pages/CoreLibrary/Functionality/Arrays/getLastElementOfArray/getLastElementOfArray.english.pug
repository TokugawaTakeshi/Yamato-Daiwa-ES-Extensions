extends ../../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../../SharedAssets/Markup/SharedAssets.english.pug
  include ../../../../../SharedComponents/SharedComponents.english.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("getLastElementOfArray"),
        description: MetaDescriptionTemplates.function({
          functionName: "getLastElementOfArray",
          whatFunctionDoes:
              "returns the last element of an array if it exists. " +
              "When the array is empty, the behavior depends on the presence or absence of the second parameter. " +
              "If the second parameter is specified, the function returns null; otherwise, an exception is thrown."
        })
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("coreLibrary.functionality.arrays.retrievingOfElements.getLastElementOfArray");

    LanguageDropDownList__YDF_DK.setLinks({
      japanese: routing.japanese.coreLibrary.$children.functionality.$children.arrays.$children.
          retrievingOfElements.$children.getLastElementOfArray.$URI,
      russian: routing.russian.coreLibrary.$children.functionality.$children.arrays.$children.
          retrievingOfElements.$children.getLastElementOfArray.$URI
    });

    const {
      $sectioning: localizedSectioning,
      $heading: topHeading
    } = localizedRouting.coreLibrary.$children.functionality.$children.arrays.$children.
        retrievingOfElements.$children.getLastElementOfArray;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    +CallableExpressionScheme--YDF_DK({
      technicalName: "getLastElementOfArray",
      headingTag: "h1",
      signatures: [

        {
          localizedDescriptiveHeading: "null will be returned if target array is empty",
          genericParameters: [ "ArrayElement" ],
          parametersSpecification: [
            {
              genericTechnicalName: "targetArray",
              type: "Array<ArrayElement>",
              required: true
            }
          ],
          returnedValue: "ArrayElement | null"
        },

        {
          localizedDescriptiveHeading: "UnexpectedEventError will be thrown is target array is empty",
          genericParameters: [ "ArrayElement" ],
          parametersSpecification: [
            {
              genericTechnicalName: "targetArray",
              type: "Array<ArrayElement>",
              required: true
            },
            {
              genericTechnicalName: "options",
              type: "Options",
              required: true
            }
          ],
          returnedValue: "ArrayElement"
        }

      ],
      headingTag: "h1"
    })
      +ObjectTypeAbstract--YDF_DK({
        typeName: "Options",
        propertiesSpecification: {
          mustThrowErrorIfArrayIsEmpty: {
            type: "boolean （true only）",
            required: true
          }
        }
      })

    p.Article-Paragraph.
      Returns the #[+Keyword--YDID last] #[+Term--YDID element] of the #[+Term--YDID indexed array]
        #[+Keyphrase--YDID if the #[+Term--YDID array] is&nbsp;#[+Keyword--YDID not]&nbsp;empty].
      If the target #[+Term--YDID array] is empty,

    ul.Article-UnorderedList

      li.
        An #[+ImportantEntity__Code--YDID UnexpectedEventError] will be thrown if the #[+Keyword--YDID second]
          #[+Term--YDID parameter] is specified with the value
          #[+ImportantEntity__Code--YDID { mustThrowErrorIfArrayIsEmpty: true }].
        Additionally, #[+ImportantEntity--YDID TypeScript] will infer that if the #[+Term--YDID function] executes
          without errors and the type of the #[+Term--YDID array] #[+Term__Contrast--YDID element] is annotated
          (explicitly or implicitly) as #[+Keyword--YDID neither] #[+ImportantEntity__Code--YDID undefined]
          #[+Keyword__Contrast--YDID nor] #[+ImportantEntity__Code--YDID null], the returned value
          could&nbsp;#[+Keyword--YDID not]&nbsp;be #[+ImportantEntity__Code--YDID undefined] or
          #[+ImportantEntity__Code--YDID null].
      li.
        #[+ImportantEntity__Code--YDID null] will be returned if the #[+Keyword--YDID second] #[+Term--YDID parameter]
          has&nbsp;not&nbsp;been specified.
        If #[+ImportantEntity--YDID TypeScript] is configured strictly, a #[+Term--YDID non-null check] will be
          required before using the returned value as non-nullable.

    p.Article-Paragraph.
      This #[+Term--YDID function] is not just an alternative to #[+Term--YDID expressions] like
       #[+SecondaryEntity__Code--YDID targetArray&lsqb;targetArray.length - 1&rsqb;]; it also #[+Keyword--YDID guarantees]
        that the #[+Keyword--YDID last] #[+Term--YDID element] of the #[+Term__Contrast--YDID array] exists.


    //- ━━━ Examples ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.examples.$heading,
      HTML_ID: localizedSectioning.examples.$anchor
    }).Article-Heading2

    +CodeViewer--YDF
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript })

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          const sample: Array<string> = [ "alpha", "bravo", "charlie" ];

          const lastElementOfSample: string | null = getLastElementOfArray(sample);
        +CodeViewer-Explanation--YDF.
          In this case, the #[+Term--YDID constant] #[+SecondaryEntity__Code--YDID lastElementOfSample] holds the
            value #[+SecondaryEntity__Code--YDID "charlie"].
          In this synthetic example, we assume knowledge of all #[+Term--YDID elements] of the sample
            #[+Term--YDID array] #[+Keyword--YDID in advance], which may not be practical, hence the nullable return
            value.

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          console.log(lastElementOfSample.length);
        +CodeViewer-Explanation--YDF.
          The #[+ImportantEntity--YDID TypeScript] error #[+ImportantEntity--YDID TS18047]
            "'lastElementOfSample' is possibly 'null'" will occur because the #[+ImportantEntity__Code--YDID length]
            property is applicable to #[+Term--YDID strings] (and #[+Term--YDID arrays]), while the
            #[+SecondaryEntity__Code--YDID lastElementOfSample] #[+Term--YDID constant] may be
            #[+ImportantEntity__Code--YDID null].
          Before calling #[+Term--YDID string] #[+Term__Contrast--YDID properties] and #[+Term__Contrast--YDID methods],
            including #[+SecondaryEntity__Code--YDID length], it is #[+Keyword--YDID required] to prove to
            #[+ImportantEntity--YDID TypeScript] that the value of #[+SecondaryEntity__Code--YDID lastElementOfSample]
            is&nbsp;not&nbsp;#[+ImportantEntity__Code--YDID null].
          One way to do this is with a #[+Term--YDID condition statement] like
          #[+SecondaryEntity__Code--YDID if (lastElementOfSample !== null) {/* ... */}].
          Inside the #[+Term--YDID if-block], #[+ImportantEntity__Code--YDID TypeScript] will recognize that this
            value is&nbsp;not&nbsp;#[+ImportantEntity__Code--YDID null].
          Other solutions exist, but using #[+Term--YDID expressions] like
            #[+SecondaryEntity__Code--YDID lastElementOfSample!.length] is #[+Keyword--YDID discouraged], as it
            compromises code quality.
          Such usage is often associated with employing the #[+ImportantEntity__Code--YDID any] type and other
            practices that #[+Keyphrase--YDID negate the benefits of using #[+ImportantEntity--YDID TypeScript]].

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          const notNullLastElementOfSample: string = getLastElementOfArray(sample, { mustThrowErrorIfArrayIsEmpty: true });
        +CodeViewer-Explanation--YDF.
          #[+Keyphrase--YDID In this case, when the #[+Keyword--YDID second] #[+Term--YDID parameter] is present], we
            can annotate the type of #[+SecondaryEntity__Code--YDID notNullLastElementOfSample] as
            #[+SecondaryEntity__Code--YDID string], #[+Keyword--YDID not]&nbsp;as&nbsp;
            #[+SecondaryEntity__Code--YDID string | null], because instead of returning
            #[+ImportantEntity__Code--YDID null], the #[+ImportantEntity__Code--YDID UnexpectedEventError] will be
            thrown when the #[+Term--YDID array] is empty.
          While you can handle this #[+Term--YDID exception] with #[+ImportantEntity__Code--YDID try/catch], there is
            #[+Keyword--YDID generally] no&nbsp;advantage to doing this over the aforementioned
            #[+Term--YDID non-null check].


    +IntelliJ_IDEA_IDEs_LiveTemplateUsageGuidance({
      imageURI: "@AssociatedWithPages/CoreLibrary/Functionality/Arrays/" +
          "getLastElementOfArray/Images/getLastElementOfArray-LiveTemplate",
      relatedTableOfContentsMetadata: localizedSectioning.IntelliJ_IDEA_IDEs_LiveTemplateUsageGuidance
    })

      ol.Article-OrderedList

        li.
          Copy the #[+Term--YDID variable] name containing the #[+Term--YDID array] or #[+Term--YDID array expression]
            to the clipboard.
          To make it possible for the #[+Term--YDID IDE] to fill in the correct value for the #[+Term--YDID parameter],
            please develop the habit of copying each time before inputting the #[+Term--YDID Live template] of the
            #[+ImportantEntity--YDID getLastElementOfArray] #[+Term--YDID function].

        li

          | Begin to input the #[+Term--YDID function] name (#[+ImportantEntity--YDID getLastElementOfArray]).
          | There will be #[+ImportantEntity--YDID 2] options for autocomplete:

          ol.Article-OrderedList

            li.
              Circled icon with the letter: it is the autocompletion of the #[+Term--YDID function] name, which is the
                #[+Keyword--YDID standard] functionality of the #[+Term--YDID IDE].
              If you press the #[+ImportantEntity--YDID Enter] key, the full #[+Term--YDID function] name will be inputted
                and also the function #[+Term--YDID import]&nbsp;declaration will be inserted if required.
              Not bad, but better automation is possible.

            li.
              The icon with the cliche is the template we need.
              Press #[+ImportantEntity--YDID Enter] again.
              The code template will be inserted, with the value of the #[+Keyword--YDID first] #[+Term--YDID parameter]
                filled with the clipboard content and selected by the cursor.
              If you follow this procedure, there is no&nbsp;need to edit the inserted value; exit the
                #[+Term--YDID parameter] editing mode by pressing #[+ImportantEntity--YDID Enter] again.

        li Delete the unnecessary code.


      p.Article-Paragraph.
        You can use the #[+Keyword--YDID alias] of this Live Template — #[+ImportantEntity--YDID gleoa], which consists
          of the first letters of all words in the #[+Term--YDID function] name.
        However, the disadvantage of such aliases is that they are harder to memorize.
        To get the autocomplete for #[+ImportantEntity__Code--YDID getLastElementOfArray], it is enough to remember the
          first letters of the #[+Term--YDID function] name.


    //- ━━━ External links ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.externalLinks.$heading,
      HTML_ID: localizedSectioning.externalLinks.$anchor
    }).Article-Heading2

    +LinksCardsFlow--YDF

      +LinksCardsFlow-ItemWithSVG_Icon--YDF({
        unendorsedExternalURI: "https://github.com/TokugawaTakeshi/Yamato-Daiwa-ES-Extensions/blob/master/" +
            "CoreLibrary/Package/Source/Arrays/getLastElementOfArray.ts",
        title: "Source code"
      }): +File__SourceCode--YDF_Icon.LinksCardsFlow--YDF-SVG_Icon

      +LinksCardsFlow-ItemWithSVG_Icon--YDF({
        unendorsedExternalURI: "https://github.com/TokugawaTakeshi/Yamato-Daiwa-ES-Extensions/blob/master/" +
            "CoreLibrary/Package/Tests/Automated/Arrays/getLastElementOfArray.test.ts",
        title: "Tests code"
      }): +File__TestCode--YDF_Icon.LinksCardsFlow--YDF-SVG_Icon
