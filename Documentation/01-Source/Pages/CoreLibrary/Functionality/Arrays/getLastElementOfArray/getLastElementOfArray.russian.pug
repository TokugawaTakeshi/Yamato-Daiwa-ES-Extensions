extends ../../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../../../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("getLastElementOfArray"),
        description: MetaDescriptionTemplates.function({
          functionName: "getLastElementOfArray",
          whatFunctionDoes:
              "возвращает последний элемент массива, когда он есть. " +
              "Если же массив пустой, будет либо возвращён null, либо брошено исключение — в зависимости от наличия " +
                "или отсутствия второго параметра."
        })
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("coreLibrary.functionality.arrays.retrievingOfElements.getLastElementOfArray");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.coreLibrary.$children.functionality.$children.arrays.$children.
          retrievingOfElements.$children.getLastElementOfArray.$URI,
      japanese: routing.japanese.coreLibrary.$children.functionality.$children.arrays.$children.
          retrievingOfElements.$children.getLastElementOfArray.$URI
    });

    const {
      $sectioning: localizedSectioning,
      $heading: topHeading
    } = localizedRouting.coreLibrary.$children.functionality.$children.arrays.$children.
        retrievingOfElements.$children.getLastElementOfArray;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    +CallableExpressionScheme--YDF_DK({
      technicalName: "getLastElementOfArray",
      localizedDescriptiveHeading: "Взять последний элемент массива",
      signatures: [

        {
          localizedDescriptiveHeading: "Если массив пустой, то будет возвращён null",
          genericParameters: [ "ArrayElement" ],
          parametersSpecification: [
            {
              genericTechnicalName: "targetArray",
              localizedName: "Целевой массив",
              type: "Array<ArrayElement>",
              required: true
            }
          ],
          returnedValue: "ArrayElement | null"
        },

        {
          localizedDescriptiveHeading: "Если массив пустой, то будет брошено исключение UnexpectedEventError",
          genericParameters: [ "ArrayElement" ],
          parametersSpecification: [
            {
              genericTechnicalName: "targetArray",
              localizedName: "Целевой массив",
              type: "Array<ArrayElement>",
              required: true
            },
            {
              genericTechnicalName: "options",
              localizedName: "Опции",
              type: "Options",
              required: true
            }
          ],
          returnedValue: "ArrayElement"
        }

      ],
      headingTag: "h1"
    })
      +ObjectTypeAbstract--YDF_DK({
        typeName: "Options",
        localizedDescriptiveHeading: "Опции",
        propertiesSpecification: {
          mustThrowErrorIfArrayIsEmpty: {
            localizedInterpretation: "Должен ли бросать ошибку, если массив пустой",
            type: "boolean (только true)",
            required: true
          }
        }
      })

    p.Article-Paragraph.
      Возвращает #[+Keyword--YDID последний] #[+Term--YDID элемент] #[+Term__Contrast--YDID индексного массива]
        #[+Keyphrase--YDID когда этот #[+Term--YDID массив] #[+Keyword--YDID не]&nbsp;пустой].
      Если же #[+Term--YDID массив] пустой то:

    ul.Article-UnorderedList

      li.
        Будет брошено #[+Term--YDID исключение] #[+ImportantEntity__Code--YDID UnexpectedEventError], если указан
          #[+ImportantEntity--YDID 2-ой] #[+Term--YDID параметр] со значением
          #[+ImportantEntity__Code--YDID { mustThrowErrorIfArrayIsEmpty: true }].
        При этом #[+ImportantEntity--YDID TypeScript] будет считать, что если #[+Term--YDID функция] отработает без
          ошибок, а указанный явно или неявно #[+Term--YDID тип] #[+Term__Contrast--YDID элементов]
          #[+Keyword--YDID не]&nbsp;может принимать значения #[+ImportantEntity__Code--YDID null] и/или
          #[+ImportantEntity__Code--YDID undefined], то возвращаемое значение тоже #[+Keyword--YDID не]&nbsp;может
          быть #[+ImportantEntity__Code--YDID null] или #[+ImportantEntity__Code--YDID undefined].

      li.
        Будет возвращён #[+ImportantEntity__Code--YDID null], если #[+ImportantEntity--YDID 2-ого] #[+Term--YDID параметра]
          #[+Keyword--YDID не]&nbsp;указано.
        В этом случае при строгих настройках #[+ImportantEntity__Code--YDID TypeScript] обяжет проверить возвращаемое
          значение на #[+ImportantEntity__Code--YDID null], прежде чем использовать его.

    p.Article-Paragraph.
      Данная #[+Term--YDID функция] #[+Keyword--YDID не]&nbsp;просто заменяет #[+Term--YDID выражения] типа
        #[+SecondaryEntity__Code--YDID targetArray&lsqb;targetArray.length - 1&rsqb;], но и позволяет
        #[+Keyword--YDID гарантировать], что #[+Keyword--YDID последний] #[+Term--YDID элемент массива] существует.


    //- ━━━ Примеры ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.examples.$heading,
      HTML_ID: localizedSectioning.examples.$anchor
    }).Article-Heading2

    +CodeViewer--YDF
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript })

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          const sample: Array<string> = [ "alpha", "bravo", "charlie" ];

          const lastElementOfSample: string | null = getLastElementOfArray(sample);
        +CodeViewer-Explanation--YDF.
          В данном случае #[+SecondaryEntity__Code--YDID lastElementOfSample] будет иметь значение
            #[+SecondaryEntity__Code--YDID "charlie"].
          В этом синтетическом примере мы #[+Keyword--YDID заранее] знаем значение всех #[+Term--YDID элементов массива]
            #[+SecondaryEntity__Code--YDID sample], чего на практике почти не&nbsp;бывает, поэтому
            возвращаемое значение может быть #[+ImportantEntity__Code--YDID null].
          Другими словами, предполагается, что #[+Term--YDID массив] может быть пустым все зависимости от того, знаем
            мы об этом заранее или нет (на практике обычно не&nbsp;знаем).

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          console.log(lastElementOfSample.length);
        +CodeViewer-Explanation--YDF

          p.Article-Paragraph.
            Возникнет ошибка #[+ImportantEntity--YDID TypeScript] #[+ImportantEntity--YDID TS18047]
              «'lastElementOfSample' is possibly 'null'», потому что #[+Term--YDID свойство]
              #[+ImportantEntity__Code--YDID length] имеется у #[+Term--YDID строкового типа] (и #[+Term--YDID массивов]),
              а #[+Term__Contrast--YDID константа] #[+SecondaryEntity__Code--YDID lastElementOfSample],
              возможно, имеет значение #[+ImportantEntity__Code--YDID null].

          p.Article-Paragraph.
            Прежде, чем вызывать у #[+SecondaryEntity__Code--YDID lastElementOfSample] какие-либо #[+Term--YDID строчные]
              #[+Term--YDID свойства] и/или #[+Term--YDID методы] (в частности, #[+SecondaryEntity__Code--YDID length])
              #[+Keyword--YDID необходимо] доказать #[+ImportantEntity--YDID TypeScript-y], что значение
              #[+SecondaryEntity__Code--YDID lastElementOfSample]
              #[+Keyword--YDID не]&nbsp;является #[+ImportantEntity__Code--YDID null].
            Сделать это можно, например, с помощью #[+Term--YDID условной конструкции]
              #[+SecondaryEntity__Code--YDID if (lastElementOfSample !== null) {/* ... */}] —
              тогда в пределах #[+Term--YDID if-блока] #[+ImportantEntity--YDID TypeScript] будет считать данное значение
              #[+Keyword--YDID не]&nbsp;являющимся #[+ImportantEntity__Code--YDID null].
            Есть и другие решения, но чего #[+Keyword--YDID категорически] #[+Keyword__Contrast--YDID не]&nbsp;должен делать
              программист, заявляющий владением языком #[+ImportantEntity--YDID TypeScript] — это использовать
              выражения типа #[+SecondaryEntity__Code--YDID lastElementOfSample!.length], так как это большая трещина в качестве кода.
            К тому же, обычно использование подобной функциональности имеет массовый
              характер, сопровождающийся применением типа #[+ImportantEntity__Code--YDID any] и других послаблений,
              #[+Keyphrase--YDID сводящих на нет смысл использования языка #[+ImportantEntity--YDID TypeScript]].

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          const notNullLastElementOfSample: string = getLastElementOfArray(sample, { mustThrowErrorIfArrayIsEmpty: true });
        +CodeViewer-Explanation--YDF.
          #[+Keyphrase--YDID В данном случае, когда у нас есть #[+ImportantEntity--YDID 2-ой] #[+Term--YDID параметр]],
            мы можем аннотировать тип #[+Term--YDID константы] #[+SecondaryEntity__Code--YDID notNullLastElementOfSample]
            как #[+SecondaryEntity__Code--YDID string], а&nbsp;#[+Keyword--YDID не]&nbsp;
            #[+SecondaryEntity__Code--YDID string | null], так как вместо возврата #[+ImportantEntity__Code--YDID null]
            в случае пустого #[+Term--YDID массива] будет выброшено #[+Term--YDID исключение]
            #[+ImportantEntity__Code--YDID UnexpectedEventError].
          Разумеется, Вы можете обработать это #[+Term--YDID исключение] с помощью #[+ImportantEntity__Code--YDID try/catch],
            но #[+Keyphrase--YDID в общем случае] это #[+Keyword--YDID не]&nbsp;даст никакого преимущества перед
            рассмотренной выше проверкой на #[+ImportantEntity__Code--YDID null].


    +IntelliJ_IDEA_IDEs_LiveTemplateUsageGuidance({
      imageURI: "@AssociatedWithPages/CoreLibrary/Functionality/Arrays/" +
          "getLastElementOfArray/Images/getLastElementOfArray-LiveTemplate",
      relatedTableOfContentsMetadata: localizedSectioning.IntelliJ_IDEA_IDEs_LiveTemplateUsageGuidance
    })

      ol.Article-OrderedList

        li.
          Скопируйте в буфер обмен имя переменной, содержащей #[+Term--YDID массив], либо само
            #[+Term--YDID выражение массива].
          Чтобы #[+Term--YDID среда разработки] смогла автоматически заполнить позицию первого #[+Term--YDID параметра]
             нужным значением, сформируйте привычку делать это копирование перед тем, как начинать вводить
             #[+Term--YDID Live template] #[+Term__Contrast--YDID функции] #[+ImportantEntity--YDID getLastElementOfArray].

        li
          | Начните набирать имя #[+Term--YDID функции] — #[+ImportantEntity--YDID addElementsToArray].
          | Подсветится #[+ImportantEntity--YDID 2] варианта автодополнения:

          ol.Article-OrderedList

            li.
              Иконка тремя наложенных друг на друга разноцветными кругами - это просто автодополнение имени
                #[+Term--YDID функции]; #[+Keyword--YDID стандартная] функциональность #[+Term--YDID среды разработки].
              Нажатие на #[+ImportantEntity--YDID Enter] введёт полное имя #[+Term--YDID функции], а также при необходимости
                объявления #[+Term--YDID импорта] этой #[+Term__Contrast--YDID функции].
              Неплохо, однако это не&nbsp;предел, до которого можно частично автоматизировать процесс.

            li.
              Иконка с клише — это как раз нужный шаблон.
              Нажмите #[+ImportantEntity--YDID Enter].
              Произойдёт вставка шаблона кода, при этом #[+Keyword--YDID первого] #[+Term--YDID параметра]
                #[+ImportantEntity__Code--YDID targetArray] будет автоматически выделено и заполнено содержимым буфера
                обмена.
              Поскольку при следовании данному руководству менять подставленное значение параметра
                на другое не&nbsp;требуется, выйдете из режима редактирования #[+Term--YDID параметра], нажав
                #[+ImportantEntity--YDID Enter] ещё раз.


        li Удалите лишний код.

      p.Article-Paragraph.
        Вы можете использовать #[+Keyword--YDID алиас] этого #[+Term--YDID LiveTemplate-а] —
          #[+ImportantEntity__Code--YDID gleoa], состоящий из первых букв всех слов, которые включает в себя имя
          #[+Term--YDID функции].
        Однако недостаток таких алиасов в том, что их приходится запоминать, а для того, чтобы получить подсказку
          #[+ImportantEntity--YDID getLastElementOfArray], достаточно лишь помнить, с чего начинается это имя
          #[+Term--YDID функции].


    //- ━━━ Внешние ссылки ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.externalLinks.$heading,
      HTML_ID: localizedSectioning.externalLinks.$anchor
    }).Article-Heading2

    +LinksCardsFlow--YDF

      +LinksCardsFlow-ItemWithSVG_Icon--YDF({
        unendorsedExternalURI: "https://github.com/TokugawaTakeshi/Yamato-Daiwa-ES-Extensions/blob/master/" +
            "CoreLibrary/Package/Source/Arrays/getLastElementOfArray.ts",
        title: "Исходный код"
      }): +File__SourceCode--YDF_Icon.LinksCardsFlow--YDF-SVG_Icon

      +LinksCardsFlow-ItemWithSVG_Icon--YDF({
        unendorsedExternalURI: "https://github.com/TokugawaTakeshi/Yamato-Daiwa-ES-Extensions/blob/master/" +
            "CoreLibrary/Package/Tests/Automated/Arrays/getLastElementOfArray.test.ts",
        title: "Код тестов"
      }): +File__TestCode--YDF_Icon.LinksCardsFlow--YDF-SVG_Icon
