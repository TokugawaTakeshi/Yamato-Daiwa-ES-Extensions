extends ../../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../../SharedAssets/Markup/SharedAssets.english.pug
  include ../../../../../SharedComponents/SharedComponents.english.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne"),
        description: MetaDescriptionTemplates.function({
          functionName: "getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne",
          whatFunctionDoes:
              "Returns the element of the specified array that matches the predicate if there is only one occurrence " +
                "of that element." +
              "Otherwise, an error will be thrown or null will be returned depending on dedicated option's value."
        })
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute(
      "coreLibrary.children.functionality.children.arrays.children.retrievingOfElements.children." +
          "getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne"
    );

    LanguageDropDownList__YDF_DK.setLinks({
      japanese: routing.japanese.coreLibrary.$children.functionality.$children.arrays.$children.
          retrievingOfElements.$children.getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne.$URI,
      russian: routing.russian.coreLibrary.$children.functionality.$children.arrays.$children.
          retrievingOfElements.$children.getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne.$URI
    });

    const {
      $sectioning: localizedSectioning,
      $heading: topHeading
    } = localizedRouting.coreLibrary.$children.functionality.$children.arrays.$children.
        retrievingOfElements.$children.getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    +CallableExpressionScheme--YDF_DK({
      technicalName: "getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne",
      signatures: [

        {
          localizedDescriptiveHeading:
              "If the number of elements that satisfy the predicate is 0 or more than 1, null will be returned",
          genericParameters: [ "ArrayElement" ],
          parametersSpecification: [
            {
              genericTechnicalName: "targetArray",
              type: "ReadonlyArray<ArrayElement>",
              required: true
            },
            {
              genericTechnicalName: "predicate",
              type: "(arrayElement: string) => boolean",
              required: true
            }
          ],
          returnedValue: "ArrayElement | null"
        },

        {
          localizedDescriptiveHeading:
              "If the number of elements that satisfy the predicate is 0 or more than 1, an error will be thrown",
          genericParameters: [ "ArrayElement" ],
          parametersSpecification: [
            {
              genericTechnicalName: "targetArray",
              type: "ReadonlyArray<ArrayElement>",
              required: true
            },
            {
              genericTechnicalName: "predicate",
              type: "(arrayElement: string) => boolean",
              required: true
            },
            {
              genericTechnicalName: "options",
              type: "Options",
              required: true
            }
          ],
          returnedValue: "ArrayElement"
        }

      ],
      headingTag: "h1"
    })
      +ObjectTypeAbstract--YDF_DK({
        typeName: "Options",
        propertiesSpecification: {
          mustThrowErrorIfElementNotFoundOrMoreThan1: {
            type: "boolean (true only)",
            required: true
          }
        }
      })

    p.Article-Paragraph.
      Returns the #[+Term--YDID element] of an #[+Term--YDID array] that satisfies the specified #[+Term--YDID predicate]
        (the function returns a #[+Term--YDID Boolean value]) #[+Keyphrase--YDID if and only if]
         there is only #[+Keyword--YDID one] occurrence of the #[+Term--YDID element].
      If the #[+Term--YDID element] does exist #[+Keyword--YDID or] if there is #[+Keyphrase--YDID more than one]
        occurrence of the #[+Term--YDID element]:

    ul.Article-UnorderedList

      li.
        An #[+Term--YDID error] will be thrown if
          #[+ImportantEntity__Code--YDID { mustThrowErrorIfElementNotFoundOrMoreThan1: true }]
          has been specified as the #[+ImportantEntity--YDID 3rd] #[+Term--YDID parameter].
        In this case, #[+ImportantEntity--YDID TypeScript] will believe that if the #[+Term--YDID function] has been
          executed successfully, the #[+Term--YDID returned value] has a #[+Keyword--YDID non-null] #[+Term--YDID type]
          specified (#[+Keyphrase--YDID in this case], #[+Keyword--YDID usually] #[+Keyword__Contrast--YDID implicitly])
          via a #[+Term--YDID generic parameter].

      li.
        If the #[+ImportantEntity--YDID 3rd] parameter has&nbsp;#[+Keyword--YDID not]&nbsp;been specified,
          #[+ImportantEntity__Code--YDID null] will be returned.
        To use the returned value as the value of the type specified via a #[+Term--YDID generic parameter],
          a #[+Term--YDID non-null check] will be #[+Keyword--YDID required] first.


    //- ━━━ Example ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.example.$heading,
      HTML_ID: localizedSectioning.example.$anchor
    }).Article-Heading2

    +CodeViewer--YDF
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript })

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          const sample: Array<string> = [ "Saint Paul", "Santa Barbara", "St. Louis", "Santa Monica" ];
        +CodeViewer-Explanation--YDF.
          Let us use the above #[+Term--YDID array] with names of cities in the USA as an example.
          #[+SecondaryEntity--YDID 2] of them start with #[+SecondaryEntity__Code--YDID "Santa"],
            #[+SecondaryEntity--YDID 3] of them start with #[+SecondaryEntity__Code--YDID "Sa"], but
            #[+Keyword--YDID only] #[+SecondaryEntity--YDID 1] starts with #[+SecondaryEntity--YDID "St."].

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          const targetCityName: string | null = getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne(
            sample, (arrayElement: string): boolean => arrayElement.startsWith("St.")
          );
        +CodeViewer-Explanation--YDF

          p.Article-Paragraph.
            The #[+Keyword--YDID 3rd] element will be returned because, according to the #[+Term--YDID predicate],
              we only need the element that begins with #[+SecondaryEntity--YDID «St.»].
            #[+Keyphrase--YDID In this case], there is only one such element.

          p.Article-Paragraph.
            However, #[+Keyphrase--YDID in practice], you will&nbsp;#[+Keyword--YDID not]&nbsp;know the contents of the
              array #[+Keyphrase--YDID in advance].
            So the string element which begins from #[+SecondaryEntity--YDID "St."],
              must&nbsp;#[+Keyword--YDID not] be single, and anyway must&nbsp;#[+Keyword--YDID not] be
              #[+Keyphrase--YDID even if expected], so with #[+Keyphrase--YDID current combinations of the parameters]
              of the #[+Term--YDID function] the #[+ImportantEntity--YDID null] could be returned.

          +CodeViewer-PartialListing--YDF: :code_listing--yda
            const targetCityName: string | null = getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne(
              sample, (arrayElement: string): boolean => arrayElement.startsWith("St.")
            );


        +CodeViewer-PartialListing--YDF: :code_listing--yda
          console.log(targetCityName.length);
        +CodeViewer-Explanation--YDF

          p.Article-Paragraph.
            The #[+ImportantEntity--YDID TypeScript] error #[+ImportantEntity--YDID TS18047]
              "'targetCityName' is possibly 'null'" will occur because the #[+ImportantEntity__Code--YDID length]
              property is actually for #[+Term--YDID strings] (and #[+Term--YDID arrays]) while the
              #[+SecondaryEntity__Code--YDID targetCityName] variable is probably #[+ImportantEntity__Code--YDID null].

          p.Article-Paragraph.
            Before calling the #[+Keyword--YDID string's] #[+Term--YDID properties] and #[+Term--YDID methods]
            (including #[+SecondaryEntity__Code--YDID length]), it is
              #[+Keyword--YDID required] that you #[+Keyword__Contrast--YDID prove] to
              #[+ImportantEntity--YDID TypeScript] that the value of #[+SecondaryEntity__Code--YDID targetCityName]
              is #[+Keyword--YDID not]&nbsp;#[+ImportantEntity__Code--YDID null].
            One way to do this is to use a #[+Term--YDID conditional statement] like
              #[+SecondaryEntity__Code--YDID if (targetCityName !== null) {}].
            In this case, #[+Keyphrase--YDID inside the #[+Term--YDID if-block]] #[+ImportantEntity--YDID TypeScript]
              will believe that this value is #[+Keyword--YDID not]&nbsp;#[+ImportantEntity__Code--YDID null].
            There are other solutions, but what engineers mastering #[+ImportantEntity--YDID TypeScript]
              #[+Keyword--YDID definitely] must #[+Keyword__Contrast--YDID not]&nbsp;to&nbsp;do is use
              expressions like #[+SecondaryEntity__Code--YDID targetCityName!.length], because it is a
              #[+Keyphrase--YDID serious crack in code quality].
            Usage of such #[+Keyword--YDID toxic] functionality is common and mostly used with the
              #[+ImportantEntity__Code--YDID any] #[+Term--YDID type] and other indulgences,
              #[+Keyphrase--YDID thereby denying the meaning of using #[+ImportantEntity--YDID TypeScript]].

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          console.log(
            getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne(
              sample, (arrayElement: string): boolean => arrayElement.startsWith("Santa")
            )
          );
        +CodeViewer-Explanation--YDF

          p.Article-Paragraph.
            In this case, #[+ImportantEntity__Code--YDID null] will be returned, because there are
              #[+SecondaryEntity--YDID 2] #[+Term--YDID elements] that satisfy #[+Term--YDID predicate] of
              #[+Keyword--YDID not]&nbsp;#[+SecondaryEntity__Code--YDID 1].
            The #[+Term--YDID function] name has been selected so that the behavior of the
              #[+Term--YDID function] is intuitive.

          p.Article-Paragraph.
            What if you are sure that there is #[+Keyword--YDID only] #[+SecondaryEntity--YDID 1]
              #[+Term--YDID element] that satisfies the #[+Term--YDID predicate]?
            In this case, you can pass
              #[+ImportantEntity__Code--YDID { mustThrowErrorIfElementNotFoundOrMoreThan1: true }] as the
              #[+ImportantEntity--YDID 3rd] #[+Term--YDID parameter].
            As a result, #[+ImportantEntity--YDID TypeScript] will not require a #[+Term--YDID non-null check].
              However, if contrary to expectations, if the number of #[+Term--YDID elements] satisfying the
              #[+Term--YDID predicate] will&nbsp;#[+Keyword--YDID not]&nbsp;be #[+Keyword__Contrast--YDID exactly]
              #[+Keyword--YDID one], #[+ImportantEntity__Code--YDID UnexpectedEventError]
              will be thrown.
            (The probability of this event is higher that than it seems.)

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          const matching: string = getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne(
            sample,
            (arrayElement: string): boolean => arrayElement.startsWith("Santa"),
            { mustThrowErrorIfElementNotFoundOrMoreThan1: true }
          );
        +CodeViewer-Explanation--YDF.
          In this case,  #[+Keyphrase--YDID when we have the #[+ImportantEntity--YDID 3rd] #[+Term--YDID parameter]],
            we can the annotate the type of #[+SecondaryEntity__Code--YDID matching] as
            #[+SecondaryEntity__Code--YDID string], #[+Keyword--YDID not]&nbsp;as
            #[+SecondaryEntity__Code--YDID string | null], because instead of returning
            #[+ImportantEntity__Code--YDID null], the #[+ImportantEntity__Code--YDID UnexpectedEventError] will the
            thrown if there is no an #[+Term--YDID element] that satisfies the #[+Term--YDID predicate] or the
            number of such #[+Term--YDID elements] is #[+SecondaryEntity--YDID 2] #[+Keyword--YDID or] more.
          Of course you can handle this #[+Term--YDID exception] using #[+ImportantEntity__Code--YDID try/catch],
            but there is #[+Keyword--YDID generally] #[+Keyword--YDID no]&nbsp;advantage to doing this instead of the
            above #[+Term--YDID non-null check].


    //- ━━━ Comparison with native methods ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.comparisonWithNativeMethods.$heading,
      HTML_ID: localizedSectioning.comparisonWithNativeMethods.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      The following #[+Keyword--YDID native] #[+Term--YDID methods] are #[+Keyword--YDID neither] better
        #[+Keyword__Contrast--YDID nor]&nbsp;worse than the #[+Term--YDID function]
        #[+ImportantEntity__Code--YDID getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne].
      The one you will use depends on the required behavior when:

    ul.Article-UnorderedList
      li There is #[+Keyword--YDID no] #[+Term--YDID array element] that satisfies the #[+Term--YDID predicate]
      li.
        There are #[+ImportantEntity--YDID 2] #[+Keyword--YDID or] #[+Keyword__Contrast--YDID more]
          #[+Term--YDID array elements] that satisfy the #[+Term__Contrast--YDID predicate].

    //- ─── Array.prototype.find ───────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.comparisonWithNativeMethods.$children.find.$heading,
      HTML_ID: localizedSectioning.comparisonWithNativeMethods.$children.find.$anchor
    }).Article-Heading3

    ul.Article-UnorderedList

      li.
        The common part of this #[+Term--YDID native method] and
          #[+ImportantEntity__Code--YDID getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne] is that
          #[+Keyword--YDID both] find the #[+Keyword__Contrast--YDID first] match with the
          #[+Term--YDID predicate].

      li.
        If there are #[+Keyword--YDID no] #[+Term--YDID elements] that satisfy the #[+Term--YDID predicate],
          #[+ImportantEntity__Code--YDID Array.prototype.find] returns #[+ImportantEntity__Code--YDID undefined] while
          #[+ImportantEntity__Code--YDID getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne]
          #[+Keyword--YDID either] returns #[+ImportantEntity__Code--YDID null] #[+Keyword--YDID or] throws an
          #[+Term--YDID error] depending on presence or absence of the #[+ImportantEntity--YDID 3rd]
          #[+Term--YDID parameter].
        If you have selected #[+Term--YDID error] throwing, #[+ImportantEntity--YDID TypeScript]
          will&nbsp;#[+Keyword--YDID not] require a #[+Term--YDID non-null check].
        Namely this feature could encourage programmers to use the
          #[+ImportantEntity__Code--YDID getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne]
          #[+Term--YDID function], because #[+ImportantEntity__Code--YDID Array.prototype.find] requires
          #[+Term--YDID non-undefined check].

      li.
        If there are #[+ImportantEntity--YDID 2] #[+Keyword--YDID or] #[+Keyword__Contrast--YDID more]
          #[+Term--YDID elements] that satisfy the #[+Term--YDID predicate],
          #[+ImportantEntity__Code--YDID Array.prototype.find]
          returns the #[+Keyword--YDID first] one and #[+Keyword--YDID ignores] the
          #[+Keyword__Contrast--YDID remaining] ones.
        In contrast, once #[+ImportantEntity__Code--YDID getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne]　
          finds an #[+Term--YDID element] that satisfies the #[+Term--YDID predicate], it will also check if there are more
          #[+Term--YDID elements] that satisfy the same #[+Term--YDID predicate].
        If this is the case, #[+Keyword--YDID none] of the #[+Term--YDID elements] will be returned.
        This feature could be useful when you need to retrieve the #[+Term--YDID array element] and make sure that the
          #[+Term--YDID element] is different than other ones.
        (For example, to guarantee that this #[+Term--YDID element] has a #[+Keyword--YDID unique]
          #[+Keyword__Contrast--YDID identifier].)


    //- ─── Array.prototype.filter ─────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.comparisonWithNativeMethods.$children.filter.$heading,
      HTML_ID: localizedSectioning.comparisonWithNativeMethods.$children.filter.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      This method has been designed for retrieving a #[+Term--YDID subarray], #[+Keyword--YDID not]&nbsp;for
        retrieving a #[+Keyword--YDID specific] #[+Term--YDID element].
      Thus, this #[+Term--YDID array] #[+Term__Contrast--YDID method] #[+Keyword--YDID also] returns an
        #[+Keyword--YDID array] of the #[+Term--YDID elements] that satisfy the #[+Term--YDID predicate],
        #[+Keyword--YDID not]&nbsp;the&nbsp;specific #[+Term--YDID element].

    p.Article-Paragraph.
      If there are #[+Keyword--YDID no]&nbsp;#[+Term--YDID elements] that satisfy the #[+Term--YDID predicate],
        an #[+Keyword--YDID empty] #[+Term--YDID array] will be returned.
      If you try to access any #[+Term--YDID element] of this #[+Term__Contrast--YDID array] (including the first
        one at #[+Term--YDID index] #[+ImportantEntity--YDID 0]), #[+ImportantEntity__Code--YDID undefined]
        will be returned and you &nbsp;#[+Keyword--YDID not]&nbsp;be warned by #[+ImportantEntity--YDID TypeScript]
        (or by many other programming languages with static typing).
      For example, #[+SecondaryEntity__Code--YDID Array&lt;string&gt;] and
        #[+SecondaryEntity__Code--YDID string&lsqb;&rsqb;] #[+Keyword--YDID actually] refer to an
        "#[+Term--YDID array] of an #[+Keyword--YDID infinite] number of #[+Term--YDID string]
        #[+Term__Contrast--YDID elements]" while, #[+Keyphrase--YDID in reality],
        #[+Keyword--YDID any] #[+Term--YDID array] is #[+Keyword--YDID finite] and sometimes empty.

    +IntelliJ_IDEA_IDEs_LiveTemplateUsageGuidance({
      imageURI: "@AssociatedWithPages/CoreLibrary/Functionality/Arrays/" +
          "getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne/Images/" +
          "getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne-LiveTemplateDemo",
      relatedTableOfContentsMetadata: localizedSectioning.IntelliJ_IDEA_IDEs_LiveTemplateUsageGuidance
    })

      ol.Article-OrderedList

        li.
          Copy the #[+Term--YDID variable] name containing the #[+Term--YDID array] or #[+Term--YDID array expression]
            itself to the clipboard.
          To make it possible for the #[+Term--YDID IDE] to fill in the correct value at the position of the
            #[+ImportantEntity--YDID 1st] #[+Term--YDID parameter], please develop the habit of copying each time
             before inputting the #[+Term--YDID Live template] of the
            #[+ImportantEntity--YDID getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne] #[+Term--YDID function].

        li

          | Begin to input the #[+Term--YDID function] name
          |   (#[+ImportantEntity--YDID getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne]).
          | There will be #[+ImportantEntity--YDID 2] autocompletes:

          ol.Article-OrderedList

            li.
              Circled icon with the letter: This is the autocompletion of the #[+Term--YDID function] name, which is the
                #[+Keyword--YDID standard] functionality of the #[+Term--YDID IDE].
              If you press the #[+ImportantEntity--YDID Enter] key, the full #[+Term--YDID function] name will be inputted
                and the function #[+Term--YDID import] declaration will be inserted if required.
              Not bad, but better automation is possible.

            li.
              The icon with the cliche: This is the template we need.
              Press #[+ImportantEntity--YDID Enter] again.
              The code template will be inserted with the value of the #[+ImportantEntity--YDID 1st]
                #[+Term--YDID parameter] filled in with the clipboard content, and then it will be selected by the cursor.
              If you follow this manual, you will not&nbsp;need to edit the inserted value, so exit the
                #[+ImportantEntity__Code--YDID targetArray] property editing mode by pressing
                #[+ImportantEntity--YDID Enter] again.

        li.
          Input the name of the #[+Term--YDID parameter] of the #[+Term__Contrast--YDID predicate] that is the
            #[+Term--YDID arrow function].
          This #[+Term--YDID parameter] is the #[+Term__Contrast--YDID element] of the target
            #[+Term__Contrast--YDID array].
          However it is recommended that you use a more exact name than "element".
          Once you are finished inputting, press #[+ImportantEntity--YDID Tab].
          You will not &nbsp;need autocomplete this time, but it will interfere, press #[+ImportantEntity--YDID Esc]
            first.

        li.
          Input the type of the #[+Term--YDID parameter] of the #[+Term__Contrast--YDID predicate], then
            press #[+ImportantEntity__Code--YDID Enter].

        li Delete the unnecessary code


    //- ━━━ External links ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.externalLinks.$heading,
      HTML_ID: localizedSectioning.externalLinks.$anchor
    }).Article-Heading2

    +LinksCardsFlow--YDF

      +LinksCardsFlow-ItemWithSVG_Icon--YDF({
        unendorsedExternalURI: "https://github.com/TokugawaTakeshi/Yamato-Daiwa-ES-Extensions/blob/master/" +
            "CoreLibrary/Package/Source/Arrays/getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne.ts",
        title: "Source code"
      }): +File__SourceCode--YDF_Icon.LinksCardsFlow--YDF-SVG_Icon

      +LinksCardsFlow-ItemWithSVG_Icon--YDF({
        unendorsedExternalURI: "https://github.com/TokugawaTakeshi/Yamato-Daiwa-ES-Extensions/blob/master/" +
            "CoreLibrary/Package/Tests/Automated/Arrays/getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne.test.ts",
        title: "Tests code"
      }): +File__TestCode--YDF_Icon.LinksCardsFlow--YDF-SVG_Icon
