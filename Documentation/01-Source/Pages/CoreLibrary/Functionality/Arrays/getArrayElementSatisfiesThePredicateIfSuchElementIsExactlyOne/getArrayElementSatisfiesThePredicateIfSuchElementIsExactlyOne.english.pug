extends ../../../../../Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../../Components/Components.pug
  include ../../../../../SharedAssets/Markup/Assets.english.pug


block append Metadata

  -

    HTML_PAGE_LANGUAGE = "en";
    HTML_PAGE_TITLE = buildHTML_PageTitle("getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne");
    HTML_PageMetaData = {
      description: MetaDescriptionTemplates.function({
        functionName: "getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne",
        whatFunctionDoes: "Returns the element of specified array matching with the predicate if such element is exactly one, " +
            "otherwise error will be thrown or null will be returned depending on dedicated option's value."
      }),
      author: HTML_PAGE_AUTHOR
    };

    FAVICON_URI = "@MustBeInPublicRoot/favicon";

    styleSheetsURIs = [ "@Shared/CommonStyles", "@Shared/ExternalComponents" ];
    scriptsURIs.endOfBody = [ "@Common" ];

    RoutingEmulator.setCurrentRoute("coreLibrary.children.functionality.children.arrays.children.retrievingOfElements.children.getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne");

    LanguageDropDownList.setLinks({
      [LanguageDropDownList.supportedLanguages.japanese]: "./getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne.japanese.html",
      [LanguageDropDownList.supportedLanguages.russian]: "./getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne.russian.html",
    });


block append SpecificContent

  article

    // TODO Edit
    +CallableExpressionScheme({
      technicalName: "getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne",
      headingTag: "h1",
      localizedDescriptiveHeading: "Makes the special, street magic",
      parametersSpecification: [
        {
          localizedName: "Target string",
          type: "string",
          required: true,
          genericTechnicalName: "targetString"
        }
      ],
      returnedValue: "boolean"
    }).Article-CallableExpressionScheme

    +CodeViewer--YDF.Article-CodeViewer
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript })

        +CodeViewer-PartialListing--YDF: :html_special_characters_to_html_entities
          console.log("OK");

        +CodeViewer-Explanation--YDF
          p.Article-Paragraph.
            This code outputs "OK" to console (thanks, cap).
