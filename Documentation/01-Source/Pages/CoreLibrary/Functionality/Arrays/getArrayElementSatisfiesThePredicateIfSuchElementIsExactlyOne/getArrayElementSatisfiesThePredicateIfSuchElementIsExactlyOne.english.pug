extends ../../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../../SharedAssets/Markup/SharedAssets.english.pug
  include ../../../../../SharedComponents/SharedComponents.english.pug


block append Metadata

  -

    HTML_PAGE_LANGUAGE = "en";
    HTML_PAGE_TITLE = buildHTML_PageTitle("getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne");
    HTML_PageMetaData = {
      description: MetaDescriptionTemplates.function({
        functionName: "getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne",
        whatFunctionDoes:
            "returns the element of specified array matching with the predicate if such element is exactly one, " +
              "otherwise error will be thrown or null will be returned depending on dedicated option's value."
      }),
      author: HTML_PAGE_AUTHOR
    };

    FAVICON_URI = "@MustBeInPublicRoot/favicon";

    styleSheetsURIs = [ "@Shared/CommonStyles", "@Layouts/TwoColumns/TwoColumnsLayout", "@Shared/ExternalComponents" ];
    scriptsURIs.endOfBody = [ "@Common" ];

    RoutingEmulator.setCurrentRoute(
      "coreLibrary.children.functionality.children.arrays.children.retrievingOfElements.children." +
          "getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne"
    );

    LanguageDropDownList__YDF_DK.setLinks({
      japanese: "./getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne.japanese.html",
      russian: "./getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne.russian.html",
    });


block append HeadScriptsLinks

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    h1.Article-Heading1 getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne

    //-
      +CallableExpressionScheme--YDF_DK({
        technicalName: "getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne",
        localizedDescriptiveHeading: "Получить элемент массива удовлетворяющего предикату если такой элемент ровно 1",
        signatures: [

          {
            localizedDescriptiveHeading: "Если искомого элемента нет либо таковых больше 1, то будет возвращён null",
            genericParameters: [ { genericTechnicalName: "ArrayElement" } ],
            parametersSpecification: [
              {
                genericTechnicalName: "targetArray",
                localizedName: "Целевой массив",
                type: "ReadonlyArray&lt;ArrayElement&gt;",
                required: true
              },
              {
                genericTechnicalName: "predicate",
                localizedName: "Предикат",
                type: "Predicate",
                required: true
              }
            ],
            returnedValue: "ArrayElement | null"
          },

          {
            localizedDescriptiveHeading: "Если искомого элемента нет либо таковых больше 1, будет брошено исключение",
            genericParameters: [ { genericTechnicalName: "ArrayElement" } ],
            parametersSpecification: [
              {
                genericTechnicalName: "targetArray",
                localizedName: "Целевой массив",
                type: "ReadonlyArray&lt;ArrayElement&gt;",
                required: true
              },
              {
                genericTechnicalName: "predicate",
                localizedName: "Предикат",
                type: "(arrayElement: string) =&gt; boolean",
                required: true
              },
              {
                genericTechnicalName: "options",
                localizedName: "Опции",
                type: "Options",
                required: true
              }
            ],
            returnedValue: "ArrayElement | null"
          }

        ]
      })
        +ObjectTypeAbstract--YDF_DK({
          typeName: "Options",
          localizedDescriptiveHeading: "Опции",
          propertiesSpecification: {
            mustThrowErrorIfElementNotFoundOrMoreThan1: {
              localizedInterpretation: "Должен бросить ошибку если элемент не найден либо результатов поиска больше 1",
              typeName: "Boolean (только true)",
              required: true
            }
          }
        })

    p.Article-Paragraph.
      Return the element of #[+Term--YDID array] satisfying to specified #[+Term--YDID predicate]
        (the #[+Term--YDID function], returns the #[+Term--YDID boolean value]) #[+Keyphrase--YDID if and only if]
        such element is #[+Keyword--YDID exactly] #[+Keyword__Contrast--YDID one].
      If there is not such element, or such element is #[+ImportantEntity--YDID 2] #[+Keyword--YDID or]
        #[+Keyword__Contrast--YDID more],

    ul.Article-UnorderedList

      li.
        The #[+Term--YDID error] will be thrown if
          #[+ImportantEntity__Code--YDID { mustThrowErrorIfElementNotFoundOrMoreThan1: true }]
          has been specified as #[+ImportantEntity--YDID 3rd] #[+Term--YDID parameter].
        In this case, #[+ImportantEntity--YDID TypeScript] will believe that if the function has been executed successfully,
          the returned function has #[+Keyword--YDID non-null] value of the type specified
          (#[+Keyphrase--YDID is this case] #[+Keyword--YDID usually] #[+Keyword__Contrast--YDID implicitly]) via
           #[+Term--YDID generic parameter].

      li.
        If the #[+ImportantEntity--YDID 3rd] parameter has&nbsp;not&nbsp;been specified, #[+ImportantEntity__Code--YDID null]
          will be returned.
        Herewith, to use the returned value as the value of type specified via #[+Term--YDID generic parameter],
          the #[+Term--YDID non-null check] will required first.


    h2.Article-Heading2 Пример

    +CodeViewer--YDF
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript })

        +CodeViewer-PartialListing--YDF: :html_special_characters_to_html_entities
          const sample: Array<string> = [ "Saint Paul", "Santa Barbara", "St. Louis", "Santa Monica" ];
        +CodeViewer-Explanation--YDF.
          Let us use the above #[+Term--YDID array] with names of cities of USA as sample.
          #[+SecondaryEntity--YDID 2] of them starts from #[+SecondaryEntity__Code--YDID "Santa"],
            #[+SecondaryEntity--YDID 3] of them from #[+SecondaryEntity__Code--YDID "Sa"], but #[+Keyword--YDID only]
            #[+SecondaryEntity--YDID 1] starts with #[+SecondaryEntity--YDID "St."].

        +CodeViewer-PartialListing--YDF: :html_special_characters_to_html_entities
          const targetCityName: string | null = getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne(
            sample, (arrayElement: string): boolean => arrayElement.startsWith("St.")
          );
        +CodeViewer-Explanation--YDF

          p.Article-Paragraph.
            #[+SecondaryEntity--YDID 3rd] element will be returned, because according to the #[+Term--YDID predicate] we
              need the element begins from #[+SecondaryEntity--YDID «St.»], and #[+Keyphrase--YDID in this case] such element is
              #[+Keyword--YDID only] #[+SecondaryEntity--YDID 1].

          p.Article-Paragraph.
            However #[+Keyphrase--YDID on practice] the content of the #[+Term--YDID array] will be
              #[+Keyphrase--YDID unknown at advance].
            So the string element which begins from #[+SecondaryEntity--YDID "St."],
              must&nbsp;#[+Keyword--YDID not] be single, and anyway must&nbsp;#[+Keyword--YDID not] be
              #[+Keyphrase--YDID even if expected], so with #[+Keyphrase--YDID current combinations of the parameters]
              of the #[+Term--YDID function] the #[+ImportantEntity--YDID null] could be returned.

          +CodeViewer-PartialListing--YDF: :html_special_characters_to_html_entities
            const targetCityName: string | null = getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne(
              sample, (arrayElement: string): boolean => arrayElement.startsWith("St.")
            );


        +CodeViewer-PartialListing--YDF: :html_special_characters_to_html_entities
          console.log(targetCityName.length);
        +CodeViewer-Explanation--YDF

          p.Article-Paragraph.
            The #[+ImportantEntity--YDID TypeScript] error #[+ImportantEntity--YDID TS18047]
              "'targetCityName' is possibly 'null'" will occur because the #[+ImportantEntity__Code--YDID length] property
              is actual for strings (and arrays) while the #[+SecondaryEntity__Code--YDID targetCityName] variable is
              probably #[+ImportantEntity__Code--YDID null].

          p.Article-Paragraph.
            Before calling the string's properties and methods including #[+SecondaryEntity__Code--YDID length] it is
              require to prove to #[+ImportantEntity--YDID TypeScript] that the value of
              #[+SecondaryEntity__Code--YDID targetCityName] is #[+Keyword--YDID not]&nbsp;#[+ImportantEntity__Code--YDID null].
            One way to do is the condition statement like #[+SecondaryEntity__Code--YDID if (targetCityName !== null) {}],
              in this case inside the #[+Term--YDID if-block] #[+ImportantEntity--YDID TypeScript] will believe that
              this value is #[+Keyword--YDID not]&nbsp;#[+ImportantEntity__Code--YDID null].
            There are another solutions but what engineer mastering the #[+ImportantEntity--YDID TypeScript]
              #[+Keyword--YDID definitely] must #[+Keyword__Contrast--YDID not]&nbsp;to&nbsp;do is usage of the
              expressions like #[+SecondaryEntity__Code--YDID targetCityName!.length], because it is the serious crack
              in the code quality.
            Usually, the usage of such functionality is mass and most commonly going with with usage of
              #[+ImportantEntity__Code--YDID any] type and other indulgences
              #[+Keyphrase--YDID denying the meaning of the usage of the #[+ImportantEntity--YDID TypeScript]].


        +CodeViewer-PartialListing--YDF: :html_special_characters_to_html_entities
          console.log(
            getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne(
              sample, (arrayElement: string): boolean => arrayElement.startsWith("Santa")
            )
          );
        +CodeViewer-Explanation--YDF

          p.Article-Paragraph.
            In this case #[+ImportantEntity__Code--YDID null] will be returned, because there are #[+SecondaryEntity--YDID 2]
             elements satisfying the #[+Term--YDID predicate], #[+Keyword--YDID not]&nbsp;#[+SecondaryEntity__Code--YDID 1].
            The function name has been selected such as it must not be the surprise.

          p.Article-Paragraph.
            What if you are sure that the elements satisfying the #[+Term--YDID predicate] will be only
              #[+SecondaryEntity--YDID 1] and it can not be any other way?
            In this case, you can pass
              #[+ImportantEntity__Code--YDID { mustThrowErrorIfElementNotFoundOrMoreThan1: true }] as
              #[+ImportantEntity--YDID 3rd] #[+Term--YDID parameter].
            As result, the #[+ImportantEntity--YDID TypeScript] will not require the #[+Term--YDID non-null check],
              but if contrary to expectations the elements satisfying the #[+Term--YDID predicate]
              will&nbsp;#[+Keyword--YDID not]&nbsp;be exactly one, the #[+ImportantEntity__Code--YDID UnexpectedEventError]
              will be thrown (the probability of this event in higher that than it seems).

        +CodeViewer-PartialListing--YDF: :html_special_characters_to_html_entities
          const matching: string = getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne(
            sample,
            (arrayElement: string): boolean => arrayElement.startsWith("Santa"),
            { mustThrowErrorIfElementNotFoundOrMoreThan1: true }
          );
        +CodeViewer-Explanation--YDF.
          #[+Keyphrase--YDID In this case when we have the #[+ImportantEntity--YDID 3rd] #[+Term--YDID parameter]],
            we can the annotate the type of #[+SecondaryEntity__Code--YDID matching] as
            #[+SecondaryEntity__Code--YDID string], #[+Keyword--YDID not]&nbsp;as
            #[+SecondaryEntity__Code--YDID string | null], because instead of returning of the
            #[+ImportantEntity__Code--YDID null] the #[+ImportantEntity__Code--YDID UnexpectedEventError] will the thrown
            if there is not element satisfying the #[+Term--YDID predicate] or such elements are 2 or more.
          Of course you can handle this exception by #[+ImportantEntity__Code--YDID try/catch], by #[+Keyword--YDID generally]
            there is #[+Keyword--YDID no]&nbsp;advantage to do this instead of considered above #[+Term--YDID non-null check].
