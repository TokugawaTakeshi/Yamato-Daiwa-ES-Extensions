extends ../../../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../../../../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    const {
      $heading: topHeading,
      $sectioning: localizedSectioning
    } = localizedRouting.coreLibrary.$children.functionality.$children.RawObjectDataProcessor.$children.commonScenarios;

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle(`RawObjectDataProcessor — ${ topHeading }`),
        description: ""
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("coreLibrary.functionality.RawObjectDataProcessor.commonScenarios");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.coreLibrary.$children.functionality.$children.RawObjectDataProcessor.$children.commonScenarios.$URI,
      japanese: routing.japanese.coreLibrary.$children.functionality.$children.RawObjectDataProcessor.$children.commonScenarios.$URI
    });


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ `RawObjectDataProcessor` — Типовые сценарии ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    h1.Article-Heading1!= `<code>RawObjectDataProcessor</code> — ${ topHeading }`

    +PageNotReadyApology--YDPD({
      currentState: PageNotReadyApology__YDPD.States.initialTextNotComplete
    })

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning
    })
      | Далее подразумевается, что Вы знаете
      |
      +Link--YDF({
        internalURI: localizedRouting.coreLibrary.$children.functionality.$children.RawObjectDataProcessor.$children.
            theoreticalMinimum.$URI
      }) теоретический минимум
      |   для использования #[+ImportantEntity--YDID RawObjectDataProcessor].

    +CompactTableOfContents--YDF_DK(localizedSectioning)


    //- ━━━ Объекты фиксированной структуры ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.fixedSchemaObjects.$heading,
      HTML_ID: localizedSectioning.fixedSchemaObjects.$anchor
    }).Article-Heading2

    p.Article-Paragraph
      | Если ожидаются данные типа
      |
      +Link--YDF({
        internalURI: localizedRouting.coreLibrary.
          $children.functionality.$children.RawObjectDataProcessor.$children.theoreticalMinimum.$sectioning.
          objectLikeDataClassification.$children.fixedSchema.$URI
      }) «объект фиксированной структуры»
      | , #[+Keyword--YDID необходимо] в #[+Term--YDID спецификации валидных данных] указать
      |   #[+ImportantEntity__Code--YDID subtype: RawObjectDataProcessor.ObjectSubtypes.fixedSchema], а через
      |   в #[+ImportantEntity__Code--YDID properties] указать спецификацию #[+Keyword--YDID каждого]
      |   #[+Keyword__Contrast--YDID свойства]:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript }): :code_listing--yda
        const externalDataProcessingResult: RawObjectDataProcessor.ProcessingResult<TargetType> = RawObjectDataProcessor.
            process(
              externalData,
              {
                nameForLogging: "Example",
                subtype: RawObjectDataProcessor.ObjectSubtypes.fixedSchema,
                properties: {
                  property1: { /* ... */ },
                  property1: { /* ... */ },
                  // ...
                  propertyN: { /* ... */ }
                }
              }
            );

    p.Article-Paragraph.
      Разумеется, поддерживаются #[+Keyword--YDID вложенные] #[+Term--YDID объекты], причём глубина
        #[+Keyword--YDID может] быть #[+Keyword--YDID произвольной]:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript }): :code_listing--yda
        type TargetType = {
          alpha1: {
            alpha2: number;
            bravo2: string;
          };
        };

        const externalDataProcessingResult: RawObjectDataProcessor.ProcessingResult<TargetType> = RawObjectDataProcessor.

            process(
              externalData,
              {

                nameForLogging: "Example",
                subtype: RawObjectDataProcessor.ObjectSubtypes.fixedSchema,

                properties: {
                  alpha1: {

                    type: Object,
                    isUndefinedForbidden: true,
                    isNullForbidden: true,

                    properties: {

                      alpha2: {
                        type: Number,
                        isUndefinedForbidden: true,
                        isNullForbidden: true,
                        numbersSet: RawObjectDataProcessor.NumbersSets.anyRealNumber
                      },

                      bravo2: {
                        type: String
                        isUndefinedForbidden: true,
                        isNullForbidden: true,
                      }

                    }

                  }

                }
              }
            );

    //- ─── Обязательность свойств ─────────────────────────────────────────────────────────────────────────────────────
    h3.Article-Heading3 Обязательность свойств

    p.Article-Paragraph.
      В случае #[+ImportantEntity--YDID ECMAScript], понятие #[+Term--YDID обязательности] (#[+Term--YDID requirement])
        #[+Term__Contrast--YDID свойств] #[+Keyword--YDID расплывчато] ввиду наличия #[+Keyword--YDID двух]
        #[+Keyword__Contrast--YDID пустых] #[+Term--YDID типов] — #[+ImportantEntity__Code--YDID undefined] и
        #[+ImportantEntity__Code--YDID null], причём отсутствие какого-либо #[+Term--YDID свойства] или
        #[+Term--YDID элемента] #[+Keyphrase--YDID в целом] #[+Keyword--YDID не]&nbsp;равносильно его наличию со явно
        указанным #[+ImportantEntity__Code--YDID undefined] в качестве значения.
      Что значит «свойство обязательно»?
      Оно не&nbsp;должно иметь значения #[+ImportantEntity__Code--YDID undefined] или #[+ImportantEntity__Code--YDID null]?
      А может, ни того, не другого?

    +AdmonitionBlock--YDF({
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning,
      SVG_Icon: true
    }).
      Между прочим, по этой же причине расплывчатыми являются и такие родственные понятия, как
        #[+Term--YDID «опциональное свойство»] или #[+Term--YDID «подстановка значения по умолчанию»] (в каких случаях
        эта постановка осуществляется?).

    p.Article-Paragraph.
      #[+Keyword--YDID До] версии #[+ImportantEntity--YDID 1.8] библиотеки #[+ImportantEntity--YDID YDEE], в
        #[+Term--YDID спецификации] #[+Term__Contrast--YDID свойств] #[+Term--YDID объектных данных]
        #[+ImportantEntity__Code--YDID required: true] означал запрет на #[+ImportantEntity__Code--YDID undefined],
        но #[+Keyword--YDID не]&nbsp;на]&nbsp;#[+ImportantEntity__Code--YDID null] — по умолчанию
        #[+ImportantEntity__Code--YDID null] #[+Keyword--YDID был] запрещён, а снять этот запрет можно было указав
        #[+ImportantEntity__Code--YDID nullable: true].
      Может быть, такой программный интерфейс и лаконичный, но не&nbsp;слишком интуитивный, а это — множественные
        трещины в поддерживаемости кода.

    p.Article-Paragraph.
      #[+Keyphrase--YDID Начиная с версии #[+ImportantEntity--YDID 1.8]], разрешения/запреты на
        #[+ImportantEntity__Code--YDID undefined] и на #[+ImportantEntity__Code--YDID null] #[+Keyword--YDID необходимо]
        указывать #[+Keyword--YDID явно] и #[+Keyword--YDID отдельно], но единообразным способом:

    +Table--YDF({
      decorativeVariation: Table__YDF.DecorativeVariations.modestlyCalmingPastelSolid
    })

      thead

        tr

          th(scope="col") Разрешение/запрет
          th(scope="col") Случай с undefined
          th(scope="col") Случай с null

      tbody

        tr

          th(scope="row") Полный запрет
          td: +ImportantEntity__Code--YDID isUndefinedForbidden: true
          td: +ImportantEntity__Code--YDID isNullForbidden: true

        tr

          th(scope="row") Условный запрет
          td: +ImportantEntity__Code--YDID undefinedForbiddenIf: ConditionAssociatedWithProperty
          td: +ImportantEntity__Code--YDID nullForbiddenIf: ConditionAssociatedWithProperty

        tr

          th(scope="row") Подстановка значения по умолчанию
          td: +ImportantEntity__Code--YDID undefinedValueSubstitution: NonEmptyValue
          td: +ImportantEntity__Code--YDID nullValueSubstitution: NonEmptyValue

        tr

          th(scope="row") Трансформация в другой пустой тип
          td: +ImportantEntity__Code--YDID mustTransformUndefinedToNull: true
          td: +ImportantEntity__Code--YDID mustTransformNullToUndefined: true

        tr

          th(scope="row") Полное разрешение
          td: +ImportantEntity__Code--YDID isUndefinedForbidden: false
          td: +ImportantEntity__Code--YDID isNullForbidden: false

    p.Article-Paragraph.
      Также, если #[+ImportantEntity__Code--YDID isUndefinedForbidden]/#[+ImportantEntity__Code--YDID isNullForbidden]
        указано значение #[+ImportantEntity__Code--YDID false] (полное разрешение), то можно
        #[+Keyword--YDID дополнительно] через
        #[+ImportantEntity__Code--YDID mustBeUndefinedIf]/#[+ImportantEntity__Code--YDID mustBeNullIf]
        #[+Keyword--YDID соответственно] указать, когда значение #[+Keyword--YDID должно] быть пустым.


    //- ─── Полный запрет пустых значений ──────────────────────────────────────────────────────────────────────────────
    h4.Article-Heading4 Полный запрет пустых значений

    ul.Article-UnorderedList

      li.
        Укажите #[+ImportantEntity__Code--YDID isUndefinedForbidden: true], чтобы запретить #[+Term--YDID свойства] со
          значениями #[+ImportantEntity__Code--YDID undefined], будь то #[+Term--YDID явный undefined] или просто
          отсутствие свойства.

      li.
        Укажите #[+ImportantEntity__Code--YDID isNullForbidden: true] чтобы запретить #[+Term--YDID свойства] со
          значением #[+ImportantEntity__Code--YDID null].

    +CodeViewer--YDF
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript })

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          type ValidData = { alpha: number; };

          const validDataSpecification: RawObjectDataProcessor.ObjectDataSpecification = {
            nameForLogging: "ValidData",
            subtype: RawObjectDataProcessor.ObjectSubtypes.fixedSchema,
            properties: {
              alpha: {
                type: Number,
                numbersSet: RawObjectDataProcessor.NumbersSets.anyRealNumber,
                isUndefinedForbidden: true,
                isNullForbidden: true
              }
            }
          };
        +CodeViewer-Explanation--YDF.
          Возьмём для примера объект с #[+Keyword--YDID единственным] #[+Term--YDID свойством]
            #[+SecondaryEntity__Code--YDID alpha], которое может иметь #[+Keyword--YDID только]
            #[+Keyword__Contrast--YDID числовые] значения, но никакие другие, в частности
            #[+SecondaryEntity__Code--YDID undefined] и #[+SecondaryEntity__Code--YDID null]
            #[+Keyword--YDID не]&nbsp;допускаются #[+Keyphrase--YDID ни&nbsp;при каких условиях].

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          const processingResult: RawObjectDataProcessor.ProcessingResult<ValidData> = RawObjectDataProcessor.
              process({}, validDataSpecification);
        +CodeViewer-Explanation--YDF.
          В данном случае #[+Keyword--YDID исходный] объект #[+Keyword--YDID невалиден], потому что
            #[+Keyword--YDID отсутствует] #[+Term--YDID свойство] #[+SecondaryEntity__Code--YDID alpha].
          Это #[+Keyword--YDID не]&nbsp; эквивалентно тому, что был бы явно указан
            #[+ImportantEntity__Code--YDID undefined], тем не менее если бы мы попробовали обратиться к
            #[+Term--YDID свойству] #[+ImportantEntity__Code--YDID alpha] у исходного объекта, то
            #[+Term--YDID возвращённым значением] было бы #[+ImportantEntity__Code--YDID undefined], а это
            #[+Keyword--YDID не]&nbsp;допускается запретом #[+SecondaryEntity__Code--YDID isUndefinedForbidden: true].

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          const processingResult: RawObjectDataProcessor.ProcessingResult<ValidData> = RawObjectDataProcessor.
              process({ alpha: undefined}, validDataSpecification);
        +CodeViewer-Explanation--YDF.
          В данном случае исходный объект тоже #[+Keyword--YDID невалиден], потому что #[+Term--YDID свойство]
            #[+SecondaryEntity__Code--YDID alpha] хотя и указано, но указанным значением является #[+Keyword--YDID явный]
            #[+ImportantEntity__Code--YDID undefined], что также #[+Keyword--YDID не]&nbsp;удовлетворяет ограничению
            #[+SecondaryEntity__Code--YDID isUndefinedForbidden: true].

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          const processingResult: RawObjectDataProcessor.ProcessingResult<ValidData> = RawObjectDataProcessor.
              process({ alpha: 7 }, validDataSpecification);
        +CodeViewer-Explanation--YDF.
          А вот здесь всё нормально: значением свойства #[+SecondaryEntity__Code--YDID alpha] является число,
            что соответствует установленным ограничениям для данного #[+Term--YDID свойства].
