extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.japanese.pug
  include ../../../SharedComponents/SharedComponents.russian.pug

  include _ConsoleCommandsParser-DemoCodeViewer.pug


block append Metadata

  -

    HTML_PAGE_LANGUAGE = "ja";
    HTML_PAGE_TITLE = buildHTML_PageTitle("ConsoleCommandsParser");
    HTML_PageMetaData = {
      description: MetaDescriptionTemplates.class({
        className: "ConsoleCommandsParser",
        whatIsClassFor:
            "クラスはコンソールコマンドの引数ベクトルの処理、バリデーションそしてオブジェクト系の特定のTypeScript型への変換のに使われている。" +
            "尚、全コマンドに関する参考本文（ヘルプ）生成機能もある。"
      }),
      author: HTML_PAGE_AUTHOR
    };

    FAVICON_URI = "@MustBeInPublicRoot/favicon";

    styleSheetsURIs = [
      "$CommonStyles",
      "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
      "$PreMadesStyles",
      "@CustomizedExternalComponents"
    ];

    scriptsURIs.endOfBody = [ "$CommonLogic" ];

    RoutingEmulator.setCurrentRoute("nodeJS.utils.ConsoleCommandsParser");

    LanguageDropDownList__YDF_DK.setLinks({
      english: "./ConsoleCommandsParser.english.html",
      russian: "./ConsoleCommandsParser.russian.html"
    });

    const pageTableOfContents = localizedRouting.nodeJS.$children.utils.$children.ConsoleApplicationLogger.$sectioning;


block append HeadScriptsLinks

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    h1.Article-Heading1 #[code ConsoleCommandsParser]クラス

    +CompactTableOfContents--YDF_DK(pageTableOfContents, { mustApplyAnchorsInsteadOfURIs: true })

    p.Article-Paragraph.
      #[+Term--YDID コンソールコマンド]の#[+Term__Contrast--YDID 引数ベクトル]の処理、バリデーションそして#[+Term--YDID オブジェクト系]の特定の
        #[+Term--YDID TypeScript型]への変換のに使われている#[+Term--YDID クラス]である。
      尚、全コマンドに関する参考本文（ヘルプ）生成機能もある。


    //- ━━━ デモ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.demo.$heading,
      HTML_ID: pageTableOfContents.demo.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      下記の例の詳しい解説が論述される。

    +DemoCodeViewer({
      commandPhrasesEnumeration: true,
      consoleCommandsObjectTypes: true,
      specification: true
    })


    //- ━━━ 最低限の理論 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.minimalTheory.$heading,
      HTML_ID: pageTableOfContents.minimalTheory.$anchor
    }).Article-Heading2

    p.Article-Paragraph
      | #[+Term--YDID コンソールコマンド]に関する正式的な用語や此れの解剖学に対する規格は#[+Keyword--YDID 無く]、
      |   #[+Keyphrase--YDID 大体慣用のコンベンションしか存在してない]。
      | 事実上、#[+ImportantEntity--YDID Node.js]の#[+ImportantEntity__Code--YDID process.argv]（#[+Term--YDID 「引数ベクトル」]、
      +Link--YDF({
        unendorsedExternalURI: "https://stackoverflow.com/q/3024197/4818123"
      }).Article-Link C++言語から継承された概念
      | ）は#[+Term--YDID 文字列]の#[+Term__Contrast--YDID 配列]に過ぎない。
      | 此れをどうすれば良いか、開発者か其の依頼側か（其の両方か）が決めている。

    p.Article-Paragraph.
      実は、#[+Term--YDID コンソールコマンド]の解析は#[+Term--YDID 任意外部構成化データの解析の問題]の#[+Keyword--YDID 一種類]で、
        此処で此の外部のデータは#[+Term--YDID 文字列]の#[+Term__Contrast--YDID 指数配列]、従って#[+Term--YDID 要素]の
        #[+Keyword--YDID 順番]を考慮する必要が#[+Keyword--YDID 有る]。
      標準の#[+ImportantEntity--YDID Node.js]機能の中に、此の様な#[+Term--YDID 配列]の解析・妥当性確認専用の機能が
        #[+Keyword--YDID 無く]、#[+ImportantEntity--YDID TypeScript]の#[+Term--YDID 型付け]上可能な限り安全に解決出来る
        第三者のライブラリでも、存在しているとは限らない。


    //- ─── 条約的な用語 ─────────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.minimalTheory.$children.conventionalTerminology.$heading,
      HTML_ID: pageTableOfContents.minimalTheory.$children.conventionalTerminology.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      全体的に、#[+Term--YDID コンソールコマンド]は空白に別けられている#[+Term--YDID 文字列]の値の順番に成っています。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Bash }).
        コマンド アーギュメント１ アーギュメント２ … アーギュメントN

    p.Article-Paragraph.
      例えば#[+SecondaryEntity--YDID Webpack]の場合、コマンドは下記の様に成る事がある。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Bash }).
        webpack build --mode development

    dl.Article-DescriptionList

      dt コマンド
      dd.
        事実上#[+Keyphrase--YDID アプリケーションの名前]に成っている（完全名か、省略名）。
        例えば、#[+SecondaryEntity--YDID Angular]フレームワークの場合、コマンドは#[+SecondaryEntity__Code--YDID ng]と言う省略である。
        然し普通はアプリケーションの名前と一致しているか、此れに近い（例：#[+SecondaryEntity__Code--YDID webpack]、
          #[+SecondaryEntity__Code--YDID gulp]、#[+SecondaryEntity__Code--YDID lerna]）。

      dt オプション（キー）
      dd.
        #[+Keyword--YDID ２重の]#[+Term--YDID nダッシュ]から始まる。
        上記の例に於いては#[+SecondaryEntity__Code--YDID --mode]。

      dt 引数
      dd.
        #[+Term--YDID オプション]の#[+Keyword--YDID 値]である。
        上記の例なら、#[+SecondaryEntity__Code--YDID development]は#[+SecondaryEntity__Code--YDID --mode]
          #[+Term--YDID オプションの引数]に成っている。

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning, SVG_Icon: true }).
      上記の慣用用語の非完全性のせい、此れを#[+Term--YDID コンソールコマンド]と言う文脈から切り離すと、意味を失うだけでなく大きい混乱を起こすのだ。

    ul.Article-UnorderedList

      li.

        #[+Term--YDID オプション]は#[+Term__Contrast--YDID 引数]が#[+Keyword--YDID 無い]場合、#[+Keyword--YDID 真]の値の
          #[+Keyword__Contrast--YDID ブーリアン]#[+Term--YDID オプション]として見做される。
        　此の様に、当#[+Term--YDID オプションが]指定されていない場合、#[+Keyword--YDID 偽]の値も同然。

      li.
        #[+Term--YDID オプション]が#[+Term__Contrast--YDID ハイフン]と一文字から成り立っている省略を持っている事が有る（例えば、
          「#[+SecondaryEntity__Code--YDID -d]」）。
        面白い事だが、上記の例に出た#[+SecondaryEntity--YDID Webpack]には、#[+SecondaryEntity__Code--YDID -m]と言う省略が存在してい
          はいるが、`--mode`の省略には#[+Keyword--YDID 成っていない]。
        御覧の様に、省略を入力する事が早い引き換え、暗記するには日常利用が必要。

      li.
        #[+Term--YDID アーギュメント]は空白を含める事は出来るが、此の場合括弧に包む事が必要に成る。

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning, SVG_Icon: true }).
      #[+ImportantEntity__Code--YDID --オプション1=引数1 --オプション2=引数2 ... --オプションN=引数N]と言った構文も存在している。
      現在#[+ImportantEntity--YDID ConsoleCommandsParser]に対応されていないが、需要が高いと言うフィードバックが届いたら、
        将来のバージョンに対応される可能性が有る。

    p.Article-Paragraph.
      上記の例に於いては#[+SecondaryEntity__Code--YDID build]とは何だろう？
      良い質問で、専用の節に相応しい。


    //- ─── 「コマンドフレーズ」用語 ────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.minimalTheory.$children.conventionalTerminology.$children.commandPhrase.$heading,
      HTML_ID: pageTableOfContents.minimalTheory.$children.conventionalTerminology.$children.commandPhrase.$anchor
    }).Article-Heading4

    p.Article-Paragraph.
      #[+DefinableTerm--YDID コマンドフレーズ]（「#[+DefinableTerm--YDID command phrase]」）はコンソールアプリケーションの具体的な機能に該当
        している#[+Keyword--YDID 非オプション]である#[+Term--YDID コンソールコマンド]の#[+ImportantEntity--YDID １アーギュメント目]である。
      例えば、「#[+SecondaryEntity__Code--YDID yda build --mode DEVELOPMENT]」には「#[+SecondaryEntity__Code--YDID build]」は
        #[+Term--YDID コマンドフレーズ]ではあるが、一単語から成り立っているとは#[+Keyword--YDID 限らない]ので、「フレーズ」と呼ぶ。
      複数の単語から成り立っている時、此れを括弧に包むと他に、#[+Term--YDID キャメルケース]の様に無空白の書き方が活用出来る。

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.notice, SVG_Icon: true }).
      大体成り立っている用語から離れても良いとしたら、「コマンド」を「アプリケーション」、「コマンドフレーズ」を「コマンド」で呼んだら合理的だったはず。
      然し今回は#[+ImportantEntity--YDID YDEE]の主要な開発社は全く新しい用語を導入するのではなく、既存の用語を拡大する事にした。

    p.Article-Paragraph.
      #[+Term--YDID コマンドフレーズ]は明示的に成っている他に暗黙的に成っている事も有る（#[+Term--YDID 規定のコマンドフレーズ]）。
      例えば、#[+SecondaryEntity__Code--YDID webpack build --mode development]では#[+SecondaryEntity__Code--YDID build]は
        #[+Keyword--YDID 規定の]#[+Term--YDID コマンドフレーズ]なので、#[+SecondaryEntity__Code--YDID webpack --mode development]
        飛ばしても良いの様に飛ばしても良い。

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.notice, SVG_Icon: true }).
      此の用語は#[+ImportantEntity--YDID YDEE]の開発長に依り導入。
      此れが何処かで既に使われているとしたら、関係無いので、違う意味に成っている可能性が有る。


    //- ─── TypeScriptの差別化組合せ ──────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.minimalTheory.$children.TypeScriptDiscriminatedUnions.$heading,
      HTML_ID: pageTableOfContents.minimalTheory.$children.TypeScriptDiscriminatedUnions.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      #[+ImportantEntity--YDID ConsoleCommandsParser]を用いるにはT#[+ImportantEntity--YDID ypeScript言語]の
        #[+Term--YDID 判別可能なユニオン型]の概念を理解する事が必要。
      一文で説明していると、#[+Term--YDID 判別可能なユニオン型]のものは、或る#[+Term--YDID オブジェクト型]は#[+Keyword--YDID 特定の]
        #[+Term--YDID プロパティ]の揃いから成り立っている#[+Keyword--YDID 複数の]#[+Term--YDID オブジェクト型]の中から何方かに
        成っているものであり、但し#[+Keyword--YDID 一つの]#[+Term--YDID プロパテ]ィは#[+Keyword--YDID 具体的な]#[+Term--YDID オブジェクト型]
        を#[+Keyword--YDID 識別]する。
      此の様に、#[+Term--YDID 判別可能なユニオン型]は#[+Keyword--YDID 複数の]#[+Keyword__Contrast--YDID 特定の]
        #[+Term--YDID オブジェクト型]の#[+Keyword--YDID 総括]。
      同じように、「普通車」は「セダン」、「ハッチバック」、「ワゴン車」等の総括で、但し種類の数が#[+Keyword--YDID 有限]で、車の種類が正しく判別するには車の資料に
        は「種類」と言う欄がある#[+Keyword--YDID 前提]。

    p.Article-Paragraph.
      #[+ImportantEntity--YDID ConsoleCommandsParser]と関連している例で此の概念を考察しよう。
      我らに開発されているコンソールアプリケーションは#[+SecondaryEntity__Code--YDID build]、#[+SecondaryEntity__Code--YDID pack]、
        #[+SecondaryEntity__Code--YDID deploy]、#[+SecondaryEntity__Code--YDID help]と言う#[+Term--YDID コマンドフレーズ]が有るとする。
      当の#[+Term--YDID コマンドフレーズ]はコンソールアプリケーションのどいった機能に該当しているか、後で考えれば良いが、ユーザー達にとって
        短い#[+Term--YDID コマンドフレーズ]の方が良い事に対して開発者達にとって一義的な#[+Term--YDID コマンドフレーズ]の方が良い時、短い奴を
        #[+Term--YDID 列挙]の#[+Keyword--YDID 値]の中に保持すれば良い。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :html_special_characters_to_html_entities
        enum CommandPhrases {
          projectBuilding = "build",
          packingOfBuild = "pack",
          projectDeploying = "deploy",
          referenceGenerating = "referenceGenerating"
        }

    p.Article-Paragraph.
      #[+Keyword--YDID 各]#[+Term--YDID コマンドフレーズ]にとって以前定義された#[+Term--YDID 列挙]の#[+Keyword--YDID 一]
        #[+Term--YDID 要素]を含む#[+ImportantEntity__Code--YDID phrase]#[+Term--YDID プロパティ]と、該当している
        #[+Term--YDID コマンドフレーズ]の#[+Keyword--YDID 全]#[+Term--YDID オプション]から成り立っている#[+Term--YDID オブジェクト]を定義しておこう。
      最後の奴以外、全#[+Term--YDID コマンドフレーズ]は#[+Term__Contrast--YDID オプション]を持っているとする。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :html_special_characters_to_html_entities
        type ProjectBuildingConsoleCommand = {
          phrase: CommandPhrases.projectBuilding;
          requiredStringOption: string;
          optionalStringOption?: string;
        };

        type PackingOfBuildConsoleCommand = {
          phrase: CommandPhrases.packingOfBuild;
          enumerationLikeStringOption: "FOO" | "BAR" | "BAZ";
          numericOption?: number;
          limitedNumericOption?: number;
        };

        type ProjectDeployingConsoleCommand = {
          phrase: CommandPhrases.projectDeploying;
          booleanOption: boolean;
          JSON5_Option?: Readonly<{ foo: string; bar?: number; }>;
        };

        type ReferenceGeneratingConsoleCommand = {
          phrase: CommandPhrases.referenceGenerating;
        };

    p.Article-Paragraph.
      利用者は何方の#[+Term--YDID コマンドフレーズ]を入力するか、我らは#[+Keyword--YDID 事前に]#[+Keyword__Contrast--YDID 知れないが]、
        #[+Keyphrase--YDID バリデーション規則を正しく定義すれば]（定後方法を後ほど説明する）以前定義された#[+Term--YDID コマンドフレーズ]の中一つ
        に成り、#[+Term--YDID オプション]も此の#[+Term__Contrast--YDID コマンドフレーズ]に該当していると#[+Keyword--YDID 保証]。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :html_special_characters_to_html_entities
        type SupportedCommandsAndParametersCombinations =
            ProjectBuildingConsoleCommand |
            PackingOfBuildConsoleCommand |
            ProjectDeployingConsoleCommand |
            ReferenceGeneratingConsoleCommand;

    p.Article-Paragraph
      | #[+ImportantEntity__Code--YDID ConsoleCommandsParser]#[+Term--YDID クラス]の#[+ImportantEntity__Code--YDID parse]
      |   #[+Term--YDID メソッド]は#[+SecondaryEntity__Code--YDID SupportedCommandsAndParametersCombinations]と
      |   #[+ImportantEntity__Code--YDID NodeJS_InterpreterAbsolutePath]と言う#[+Term--YDID プロパティ]
      |  （#[+ImportantEntity__Code--YDID process.argv]#[+Term--YDID 配列]の#[+Keyword--YDID 最初の]
      |   #[+ImportantEntity--YDID 2]#[+Term--YDID 要素]に該当している）付きの
      |   #[+SecondaryEntity__Code--YDID SupportedCommandsAndParametersCombinations]と言う以前定義された
      |   #[+Term--YDID 型]の#[+Term__Contrast--YDID オブジェクト]を返す。
      |   事実上、
      +ImportantEntity__Code--YDID: :html_special_characters_to_html_entities
        ParsedCommand<SupportedCommandsAndParametersCombinations>
      |   に於いて#[+ImportantEntity__Code--YDID ParsedCommand]#[+Term--YDID TypeScriptジェネリック]は、
      |   #[+SecondaryEntity__Code--YDID SupportedCommandsAndParametersCombinations]#[+Term--YDID ユニオン]
      |   に此の#[+ImportantEntity--YDID 2個]の#[+Term--YDID プロパティ]が追加されると#[+ImportantEntity--YDID TypeScript]
      |   に伝える。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :html_special_characters_to_html_entities
        const parsedConsoleCommand: ConsoleCommandsParser.
            ParsedCommand<SupportedCommandsAndParametersCombinations> =
            ConsoleCommandsParser.parse(ApplicationConsoleLineInterface.specification);

    p.Article-Paragraph.
      でも、利用者が具体的に何方の#[+Term--YDID コマンドフレーズ]を入力したか、どうやって判断すれば良いだろう。
      #[+Term--YDID 判別可能なユニオン]の#[+Keyword--YDID 全]#[+Term--YDID サブタイプ]は#[+SecondaryEntity__Code--YDID phrase]と
        言った#[+Keyphrase--YDID 当#[+Term--YDID ユニオン]の中に]#[+Keyword--YDID 唯一な]値の識別子役割の
        #[+Term--YDID プロパティ]を持っているので、条件構成（此の場合だと、#[+ImportantEntity__Code--YDID switch/case]が
        丁度良い）を持ちって具体的な#[+Term--YDID サブタイプ]が判断出来る。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :html_special_characters_to_html_entities

        switch (parsedConsoleCommand.phrase) {

          case ApplicationConsoleLineInterface.CommandPhrases.projectBuilding: {
            console.log("Build project");
            console.log(parsedConsoleCommand.requiredStringOption);
            console.log(parsedConsoleCommand.optionalStringOption);
            break;
          }

          case ApplicationConsoleLineInterface.CommandPhrases.packingOfBuild: {
            console.log("Pack build");
            console.log(parsedConsoleCommand.enumerationLikeStringOption);
            console.log(parsedConsoleCommand.numericOption);
            console.log(parsedConsoleCommand.limitedNumericOption);
            break;
          }

          case ApplicationConsoleLineInterface.CommandPhrases.projectDeploying: {
            console.log("Deploy project")
            console.log(parsedConsoleCommand.phrase);
            console.log(parsedConsoleCommand.booleanOption);
            console.log(parsedConsoleCommand.JSON5_Option);
            break;
          }

          case ApplicationConsoleLineInterface.CommandPhrases.referenceGenerating: {
            console.log(ConsoleCommandsParser.generateFullHelpReference(ApplicationConsoleLineInterface.specification));
          }

        }

    p.Article-Paragraph.
      結果のして、#[+Keyword--YDID 各]#[+Term--YDID caseブロック]の中に、現在の#[+Term--YDID コマンドフレーズ]に該当している
        #[+SecondaryEntity__Code--YDID parsedConsoleCommand]の#[+Term--YDID プロパティ]にアクセスする事が出来る。
      もし別の#[+Term--YDID コマンドフレーズ]に該当している#[+Term--YDID オプション]に参照している#[+Term--YDID プロパティ]にアクセスすると、
        #[+ImportantEntity--YDID TypeScript]が気付きエラーを起こす。
      但し、上記の例だと、#[+Keyword--YDID 任意な]#[+Term--YDID プロパティ]が多いので、これら使う前に
        #[+Term--YDID 非undefined確認]が必要に成る。


    //- ━━━ コマンドラインインターフェース（CLI）開発　｜　段階的な案内 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.stepwiseGuide.$heading,
      HTML_ID: pageTableOfContents.stepwiseGuide.$anchor
    }).Article-Heading2

    //- ─── ①　コマンドフレーズの初期揃いの決定 ─────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.stepwiseGuide.$children.initialCommandPhrasesSet.$heading,
      HTML_ID: pageTableOfContents.stepwiseGuide.$children.initialCommandPhrasesSet.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      貴方のアプリケーションの中に利用可能な#[+Term--YDID コマンドフレーズ]を決めておこう。

    ul.Article-UnorderedList

      li.
        単一の#[+Term--YDID コマンドフレーズ]が希望される場合が在る。
        アプリケーションの専門が幅狭ければ、通常の事だと考えられる。

      li.
        いつでも新しい#[+Term--YDID コマンドフレーズ]が追加出来るから、取り敢えず自分にとって明確な#[+Term--YDID コマンドフレーズ]を決めよう。

    p.Article-Paragraph.
      #[+Keyword--YDID 全]#[+Term--YDID コマンドフレーズ]を#[+Term__Contrast--YDID 列挙]の中に保持しておこう。
      #[+Term--YDID 列挙]の#[+Keyword--YDID キー]はコンソールに実際に入力される文字列と一致させる必要はなく、#[+Keyphrase--YDID 資料が無くても]
        #[+Term--YDID キー]の意味が開発者にとって明かにした方が良い。
      多数の開発者と同じ様に、実際に入力される文字列を短くしたいなら、これらを#[+Term--YDID 列挙要素]の#[+Keyword--YDID 値]に保持しておこう。
      幸いに#[+ImportantEntity--YDID TypeScript]なら#[+Term--YDID 文字列]#[+Term__Contrast--YDID 要素]の
        #[+Term--YDID 列挙]が定義可能で、他の言語なら、同じ機能が無いか制限が有る事が多い。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :html_special_characters_to_html_entities
        export enum CommandPhrases {
          projectBuilding = "build",
          packingOfBuild = "pack",
          projectDeploying = "deploy",
          referenceGenerating = "help"
        }

    p.Article-Paragraph.
      上記通り、#[+Term--YDID 列挙]の#[+Term__Contrast--YDID キー]として#[+Term--YDID 動詞]#[+Keyword--YDID 無し]の単語の組み合わせ
        であり、代わりに#[+Term--YDID 動名詞]が使われている。
      名前は#[+Term--YDID 動詞]から始まるが、#[+Term--YDID 関数]・#[+Term--YDID メソッド]の名前に成っていないと、混乱が発生する。
      然し、スタイルガイド定期な要求と成っているので、反対し自分の規律が導入出来る。

    p.Article-Paragraph.
      此のコードべ#[+Keyword--YDID 別の]ファイル（例えば、#[+SecondaryEntity--YDID ApplicationConsoleLineInterface.ts]）で書く推薦。
      其れに、明確なコンテキストの定義の為当ファイルの中身を#[+Term--YDID 名スペース]
        （例えば#[+SecondaryEntity__Code--YDID ApplicationConsoleLineInterface]）に包む事を御勧め。
      開発者達の中に（#[+ImportantEntity--YDID TypeScript]の）#[+Term--YDID 名スペース]の反対派は居るが、こういった
        #[+Term--YDID 名スペース]の否定的な評判の原因は、コードをモジュールに分割する旧い方法に多く有る。
      上記の例の様に、#[+Term--YDID 名スペース]を#[+Term__Contrast--YDID 型]や#[+Term__Contrast--YDID 定数]の為のコンテキストコンテナー
        として使っても、悪影響が特に#[+Keyword--YDID 無い]。


    //- ─── ②　各コマンドフレーズのオプションの決定 ────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.stepwiseGuide.$children.commandPhrasesOptions.$heading,
      HTML_ID: pageTableOfContents.stepwiseGuide.$children.commandPhrasesOptions.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      #[+Keyword--YDID 各]#[+Term--YDID コマンドフレーズ]にとって#[+Term--YDID オプション]の揃い（#[+Term--YDID 型]、
        #[+Term--YDID 必須性]や有れば#[+Term--YDID 規定値]）を決めておこう。

    ul.Article-UnorderedList

      li.
        #[+Term--YDID コマンドフレーズ]の場合と同じ様に、より早く自分のコードからフィードバックを取るには#[+Keyphrase--YDID 初期段階では]自分にとって
          最も明確で、最低限の#[+Term--YDID オプション]にすれば良い。

      li.
        一部分の#[+Term--YDID コマンドフレーズ]が#[+Term__Contrast--YDID オプション]が無い事が有る。
        特に問題無い事であり、将来的に#[+Term--YDID オプション]が必要に成ったら、其の時追加されば良い。
        現在の例だと、#[+SecondaryEntity__Code--YDID referenceGenerating]#[+Term--YDID コマンドフレーズ]は
          #[+Term__Contrast--YDID オプション]が#[+Keyword--YDID 無い]。

    p.Article-Paragraph.
      今、#[+Keyword--YDID 各]#[+Term--YDID コマンドフレーズ]にとって下記の#[+Term--YDID プロパティ]を含む#[+Term--YDID オブジェクト型]
        を定義しておこう。

    dl.Article-DescriptionList

      dt phrase
      dd.
        #[+Term--YDID オブジェクト型]自体と同じ#[+Term--YDID コマンドフレーズ]に該当している#[+Term--YDID コマンドフレーズ]の
          #[+Term__Contrast--YDID 列挙]（上記の例に於いては#[+SecondaryEntity__Code--YDID CommandPhrases]）の
          #[+Term--YDID 要素]で#[+Keyword--YDID なくてはならない]。
        当プロパティは#[+Keyword--YDID 識別子]の様に成り、利用者は具体的に何方の#[+Term--YDID コマンドフレーズ]の入力したか、判別するのに使われる。
        此れの#[+Term--YDID 型]は、#[+Term--YDID 列挙]自体では#[+Keyword--YDID なく]
        （上記の例だと#[+SecondaryEntity__Code--YDID CommandPhrases]）、此の#[+Term--YDID 列挙]の具体的な#[+Term--YDID 要素]
        （例えば#[+SecondaryEntity__Code--YDID CommandPhrases.projectBuilding]）にしてはいけない
        （#[+ImportantEntity--YDID TypeScript]の#[+Term--YDID 差別化組合せ]上は意味の無い事では#[+Keyword--YDID ない]）。

      dt コマンドのオプション
      dd

        p.Article-Paragraph.
          対象の#[+Term--YDID コマンドフレーズ]のに該当している全#[+Term--YDID オプション]。
          #[+Term--YDID キー]は利用者によりコンソール入力されるものと必ず一致させなければいけない訳では#[+Keyword--YDID なく]、
            #[+Keyphrase--YDID 資料が無くても]和訳出来るエンジン達にとって意味を明確にすれば良い。
          #[+Keyword--YDID 各]#[+Term--YDID プロパティ]の#[+Term--YDID 型]は下記の利用可能な#[+Term--YDID 型]の何方か
            でなくてはならない。

        ul.Article-UnorderedList
          li #[+ImportantEntity__Code--YDID string]
          li #[+ImportantEntity__Code--YDID number]
          li #[+ImportantEntity__Code--YDID boolean]
          li
            | #[+Keyword--YDID 主要]#[+Term--YDID パッケージ]（#[+ImportantEntity--YDID @yamato-daiwa/es-extensions]）からの
            +Link--YDF({
              internalURI: localizedRouting.coreLibrary.$children.
                  functionality.$children.
                  types.$children.
                  ParsedJSON_AndRelated.$URI
            }).Article-Link ParsedJSON
            | 系の#[+Term--YDID オブジェクト]

        p.Article-Paragraph.
          #[+Term--YDID オプション]は#[+Keyword--YDID 任意]で、#[+Keyphrase--YDID 但し規定値は予定#[+Keyword--YDID されていない]]場合、
            #[+Term--YDID コロン]（#[+Term--YDID キー]と#[+Term__Contrast--YDID 値]の#[+Term--YDID 型]の区切り）の前に
            #[+Term--YDID 疑問符]を入れる#[+Keyphrase--YDID 必要が有る]。

    p.Article-Paragraph.
      やがて、#[+Keyword--YDID 各]#[+Term--YDID コマンドフレーズ]に該当している以前作った#[+Term--YDID オブジェクト型]にとって
        #[+Term--YDID ユニオン]を定義しておいてください （下記の例に於いては
        #[+SecondaryEntity__Code--YDID SupportedCommandsAndParametersCombinations]）。

    +DemoCodeViewer({
      commandPhrasesEnumeration: true,
      consoleCommandsObjectTypes: true
    })

    ul.Article-UnorderedList

      li.
        再び名前の付け方と関連しているスタイルガイドの例に気を付けてもらいたい。
        具体的な#[+Term--YDID コマンドフレーズ]に該当している#[+Keyword--YDID 各]#[+Term--YDID 型]の名前は#[+Term--YDID 動詞]を
          #[+Keyword--YDID 含めていなく]、#[+SecondaryEntity--YDID ～ConsoleCommand]末尾は原型と成っています。

      li.
        #[+ImportantEntity--YDID Readonly]と言う#[+Term--YDID ユーティリティ型]の利用は必須では#[+Keyword--YDID ない]が、
          #[+Keyword--YDID 推薦]だ。
        此れを使う事に依り、以前宣言された#[+Term--YDID オブジェクト型]の#[+Term__Contrast--YDID プロパティ]はプログラミングの実行中変わる事は無い
          と明示的に指示する。


    //- ─── Шаг 3 — Определение спецификации консольного приложения ────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.stepwiseGuide.$children.consoleApplicationSpecification.$heading,
      HTML_ID: pageTableOfContents.stepwiseGuide.$children.consoleApplicationSpecification.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      #[+Term--YDID コンソールアプリケーション仕様]通りに入力された#[+Term--YDID コンソールコマンド]がバリデーション・処理される事に成り、
        必要に応じて当コンソールアプリケーションの使い方に対して案内本文が生成される。

    p.Article-Paragraph.
      #[+ImportantEntity__Code--YDID ConsoleCommandsParser.CommandLineInterfaceSpecification]#[+Term--YDID 型]の
        #[+Term--YDID 定数]を定義しておこう。
      #[+Keyword--YDID 多層]#[+Term--YDID オブジェクト型]と成り、#[+Keyword--YDID 全]#[+Keyword--YDID コマンドフレーズ]
        （各一個の#[+Term--YDID オプション]を含めて）の定義及び案内を生成する為のデータを#[+Keyword--YDID 含まなければいけません]。
      #[+SecondaryEntity__Code--YDID ApplicationConsoleLineInterface]の様な#[+Term--YDID 名スペース]にコードを包む推薦通り
        してくれた場合、#[+SecondaryEntity__Code--YDID consoleCommandLineInterfaceSpecification]の様に長い#[+Term--YDID 定数名]
        は#[+Keyword--YDID 不要]で、#[+ImportantEntity--YDID ApplicationConsoleLineInterface]と言う#[+Keyword--YDID コンテキスト]
        が有るから、単に#[+ImportantEntity__Code--YDID specification]だけで良い。

    +DemoCodeViewer({
      commandPhrasesEnumeration: true,
      consoleCommandsObjectTypes: true,
      specification: true
    })

    ol.Article-OrderedList

      li.
        #[+ImportantEntity__Code--YDID applicationName]#[+Term--YDID プロパティ]に貴方のアプリケーションの名前を指定しておこう。
        ターミナルに入力される名前と必ずしも一致しなければいけない訳では#[+Keyword--YDID なく]、複数の言葉から成り立っている場合空白で訳ても良い。
        指定された名前は参考の生成の為に使われる。

      li.
        #[+ImportantEntity__Code--YDID applicationName]と違って、#[+ImportantEntity__Code--YDID applicationDescription]
          （和訳：アプリケーションの記述）#[+Term--YDID プロパティ]は#[+Keyword--YDID 任意]ではありますが、ちゃんとした参考を生成するには
          短くても良いからアプリケーションについて一言を指定する推薦。

      li

        | #[+ImportantEntity__Code--YDID commandPhrases]#[+Term--YDID プロパティ]は
        |   #[+Keyword--YDID 各]#[+Term--YDID コマンドフレーズ]の仕様を含めなくてはならない。
        | #[+Keyword--YDID 連想配列系の]#[+Term--YDID オブジェクト]と成り、#[+Term--YDID キー]は#[+Term--YDID コマンドフレーズ]と一致
        |   しなければいけない。
        | 一番安全なのは、#[+Term--YDID ブラケット表記法]を活用し、当#[+Term--YDID オブジェクト]の#[+Term__Contrast--YDID キー]を
        |   #[+SecondaryEntity__Code--YDID CommandPhrases]#[+Term--YDID 列挙]の#[+Term__Contrast--YDID 要素]に
        |   結び付く事（例えば、#[+SecondaryEntity__Code--YDID &lsqb;CommandPhrases.packingOfBuild&rsqb;]）。
        | #[+Term--YDID 連想配列]の#[+Term__Contrast--YDID 値]なら、

        ul.Article-UnorderedList

          li.
            該当している#[+Term--YDID コマンドフレーズ]は規定に成っている場合、#[+ImportantEntity__Code--YDID isDefault]と言う
              #[+Keyword--YDID 真偽型の]プロパティに#[+ImportantEntity__Code--YDID true]をしていする事。
            #[+Keyword--YDID 規定の]#[+Term--YDID コマンドフレーズ]は#[+ImportantEntity--YDID 一個]#[+Keyword--YDID しか]
              有り得ないので、#[+ImportantEntity__Code--YDID isDefault: true]を指定しても良いのは、#[+Keyword--YDID 最大]
              #[+ImportantEntity--YDID 一個]の#[+Term--YDID コマンドフレーズ]、
              #[+Keyphrase--YDID さもなくばアプリケーションの起動の際例外が投げられる]。

          li.
            上述の#[+ImportantEntity__Code--YDID applicationDescription]の様に、#[+Term--YDID コマンドフレーズ]の仕様には
              #[+ImportantEntity__Code--YDID description]#[+Term--YDID プロパティ]（和訳：#[+Term--YDID コマンドフレーズ]の記述）が指定
              出来る。
            #[+Keyword--YDID 任意]に成ってはいるが、高品質の参考本文を生成するにはしたいした方が良い。
            上記の例だと、#[+SecondaryEntity__Code--YDID help]
              (#[+SecondaryEntity__Code--YDID CommandPhrases.referenceGenerating])コマンドだけ記述がついていない。

          li.
            #[+Term--YDID コマンドフレーズ]が#[+Term__Contrast--YDID オプション]がある場合、#[+ImportantEntity__Code--YDID options]
              #[+Term--YDID プロパティ]（こいつも#[+Keyword--YDID 連想配列系]の#[+Term--YDID オブジェクト]である）を埋める事。
