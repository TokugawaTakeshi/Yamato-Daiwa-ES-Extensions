extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.japanese.pug
  include ../../../SharedComponents/SharedComponents.japanese.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("リリースノート ： 1.7"),
        description: MetaDescriptionTemplates.realiseNotes({ version: "1.7" })
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("realiseNotes.v1d7");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.realiseNotes.$children.v1d7.$URI,
      russian: routing.russian.realiseNotes.$children.v1d7.$URI
    });


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    h1.Article-Heading1 リリースノート｜バージョン 1.7

    h2.Article-Heading2 主要パッケージ (@yamato-daiwa/es-extensions)

    h3.Article-Heading3 新規機能

    h4.Article-Heading4 配列の弄り

    ul.Article-UnorderedList

      li: +Link--YDF({
        internalURI: localizedRouting.coreLibrary.$children.functionality.$children.arrays.$children.
            other.$children.addElementsToArrayIfTheyAreNotPresentOtherwiseRemove.$URI
      }) addElementsToArrayIfTheyAreNotPresentOtherwiseRemove

      li: +Link--YDF({
        internalURI: localizedRouting.coreLibrary.$children.functionality.$children.arrays.$children.
            creating.$children.createArrayOfNaturalNumbers.$URI
      }) createArrayOfNaturalNumbers

      li: +Link--YDF({
        internalURI: localizedRouting.coreLibrary.$children.functionality.$children.arrays.$children.
            retrievingOfSubarrays.$children.cropArray.$URI
      }) cropArray

    h3.Article-Heading3 破壊的変更

    h4.Article-Heading4 配列の弄り

    h5.Article-Heading5.
      #[code getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne]と
      #[code getIndexOfArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne]でのの３引数目の名前変更

    p.Article-Paragraph.
      #[+Term--YDID オブジェクト型]の#[+ImportantEntity--YDID 第３引数目]に於いて、
        #[+ImportantEntity__Code--YDID mustThrowErrorIfElementNotFoundOrMoreThan1]#[+Term--YDID プロパティ]は
        #[+ImportantEntity--YDID mustThrowErrorIfElementNotFoundOrMatchesAreMultiple]に名前が変更された。

    dl.Article-DescriptionList

      dt 理由
      dd.
        以前の名前が迷わせる、即ち「or more than1」を「#[+Keyword--YDID 元の]#[+Term--YDID 配列]に１個以上の#[+Term--YDID 要素]がなくては
          成らない」と#[+Keyword--YDID 勘違い]しがち。
        今の「or matches are multiple」（「・・・それとも一致は複数の場合」）は、
        #[+Keyphrase--YDID #[+Term--YDID プレディケート]に満たされている#[+Term--YDID 要素]の中に]は複数がなくては成らないと明確に伝える様に成った。

      dt 貴方のコードが編集が必要に成る条件
      dd.
        #[+ImportantEntity__Code--YDID getArrayElementSatisfiesThePredicateIfSuchElementIsExactlyOne]の利用の際、
          #[+ImportantEntity--YDID ３引数目]が参照されている所が有る。

      dt 対策
      dd.
        コードエディター又は#[+Term--YDID 結合開発環境]の適切な機能を使って、プロジェクトの全ファイルに
          #[+ImportantEntity__Code--YDID mustThrowErrorIfElementNotFoundOrMoreThan1]を
          #[+ImportantEntity__Code--YDID mustThrowErrorIfElementNotFoundOrMatchesAreMultiple]に置き換えて下さい。


    h4.Article-Heading4 「RawObjectDataProcessor」クラス
    h5.Article-Heading5 ローカリゼーションオブジェクト名前変更

    p.Article-Paragraph.
      更新された名付けのガイドライン通り、#[+ImportantEntity__Code--YDID RawObjectDataProcessorLocalization__English]と言う
        ローカリゼーション#[+Term--YDID オブジェクト]は#[+ImportantEntity__Code--YDID rawObjectDataProcessorLocalization__english]に
        名前が変更された。
      同じ様な変更が他のローカリゼーション#[+Term--YDID オブジェクト]にも適応された。


    h2.Article-Heading2 ブラウザーJavaScript (@yamato-daiwa/es-extensions-browserjs)

    h3.Article-Heading3 破壊的変更

    h4.Article-Heading4 DOMの弄り

    h5.Article-Heading5.
      #[code getExpectedToBeSingleDOM_Element]と#[code getExpectedToBeSingleChildOfTemplateElement]関数に於ける
        引数及びエラー投擲条件変更

    p.Article-Paragraph.
      以前、#[+Keyword--YDID オブジェクト型の]#[+Keyword__Contrast--YDID 単一]#[+Term--YDID 引数]は#
        [+ImportantEntity__Code--YDID context]と言う#[+Keyword--YDID 多態性の]#[+Keyword__Contrast--YDID 任意]
        #[+Term--YDID プロパティ]が有り、指定された場合、
        #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.mdn.DOM.Element }) Element型]か、
        #[+Link--YDF({ unendorsedExternalURI: sharedExternalLinks.mdn.DOM.Document }) Document型]か、
        これらから継承した#[+Term--YDID 型]でなければいけなかった。
      当#[+Term--YDID プロパティ]は#[+ImportantEntity__Code--YDID contextElement]に代わり、#[+Keyword--YDID 多態性の]儘だが、
        #[+Term--YDID 型]は#[+ImportantEntity__Code--YDID ParentNode | Readonly&lt;{ selector: string; }&gt;]に成った御蔭て
        コンテキスト#[+Term--YDID 要素]自体だけでなく、此れの#[+Term--YDID セレクター]を指定可能に成った。
      但し、コンテキスト#[+Term--YDID 要素]の#[+Term__Contrast--YDID セレクター]が指定してある場合、此れに#[+Keyword--YDID 丁度]
        #[+Keyword__Contrast--YDID 一個]の#[+Term--YDID 要素]が該当#[+Keyword--YDID しなければいけない]、然もないと
        #[+Term--YDID エラー]が投げられる（#[+ImportantEntity--YDID 0個]の場合は
        #[+ImportantEntity__Code--YDID DOM_ElementRetrievingFailedError]、#[+ImportantEntity--YDID ２個以上]の場合
        #[+ImportantEntity__Code--YDID UnexpectedEventError]）。
      [+ImportantEntity__Code--YDID Element]も#[+ImportantEntity__Code--YDID Document]も
        #[+ImportantEntity__Code--YDID ParentNode]から継承した御蔭で、旧い#[+Term--YDID プロパティ]の#[+Term__Contrast--YDID 型]と
        新しい#[+Term--YDID プロパティ]の型が互換性が有る。

    dl.Article-DescriptionList

      dt 理由
      dd
        | コンテキスト#[+Term--YDID 要素]の指定方法の統一。
        | #[+ImportantEntity__Code--YDID ParentNode | Readonly&lt;{ selector: string; }&gt;]#[+Term--YDID 型]の
        |   #[+ImportantEntity__Code--YDID contextElement]#[+Term--YDID プロパティ]は複数の#[+Term--YDID 関数]に使われる様に成った
        |   だけでなく、#[+ImportantEntity--YDID YDEE]以外にも使われる事がある（例えば、
        +Link--YDF({
          endorsedExternalURI: sharedExternalLinks.otherLibraries.yamatoDaiwa.frontend
        }) Yamato Daiwa Frontend
        | と言うフロントエンド開発専用ライブラリ.

      dt 貴方のコードが編集が必要に成る条件
      dd.
        #[+ImportantEntity__Code--YDID getExpectedToBeSingleDOM_Element]#[+Term--YDID 関数]か、
          #[+ImportantEntity__Code--YDID getExpectedToBeSingleChildOfTemplateElement]#[+Term--YDID 関数]の
          #[+Term__Contrast--YDID プロパティ]が使用中。

      dt 対策
      dd.
        コードエディター又は#[+Term--YDID 結合開発環境]の適切な機能を使って、プロジェクトの全ファイルに
         #[+ImportantEntity__Code--YDID context]#[+Term--YDID プロパティ]を#[+ImportantEntity__Code--YDID contextElement]に
         置き換えて下さい。
        コンテキスト#[+Term--YDID 要素]ではなく、此れの#[+Term--YDID セレクター]が使えれば便利なら、最新の#[+ImportantEntity--YDID API]を
          使ってリファクタリングしても良いが、#[+Term--YDID エラー]が投げられない様に、#[+Term--YDID セレクター]に#[+Keyword--YDID 丁度]
          #[+ImportantEntity--YDID 1個]の#[+Term--YDID 要素]が該当している様に気を付けるのだ。


    h4.Article-Heading4 イベント処理

    h5.Article-Heading5 #[code addLeftClickEventHandler]関数APIの変更

    p.Article-Paragraph.
      相変わらず、当関数の#[+Keyword--YDID 単一の]#[+Term--YDID 引数]は#[+Term__Contrast--YDID オブジェクト型]だが、
        此れの#[+Term--YDID プロパティ]に下記の変化が適応された。

    dl.Article-DescriptionList

      dt #[+ImportantEntity__Code--YDID targetElementSelector]の廃止
      dd.
        当#[+Term--YDID プロパティ]が削除されかた代わりに、#[+ImportantEntity__Code--YDID targetElement]#[+Term--YDID プロパティ] to
          #[+Keyword--YDID 多態性の]になった。
        現在以降、目的#[+Term--YDID 要素]の#[+Term__Contrast--YDID セレクター]を#[+ImportantEntity__Code--YDID targetElement]
          #[+Term--YDID オブジェクト]の#[+ImportantEntity__Code--YDID selector]と言う
          #[+Keyword--YDID 文字列型の]#[+Term--YDID プロパティ]で指定しなければいけない。
        但し以前と相変わらず、目的#[+Term--YDID 要素]は#[+Term__Contrast--YDID セレクター]で指定された場合、
          #[+ImportantEntity__Code--YDID mustApplyToAllMatchingsWithSelector]か、
          #[+ImportantEntity__Code--YDID mustIgnoreSubsequentMatchingsWithSelector]か、
          #[+ImportantEntity__Code--YDID mustExpectExactlyOneMatchingWithSelector]#[+Term--YDID プロパティ]で
          当#[+Term--YDID セレクター]に複数の#[+Term--YDID 要素]が発見された時の振る舞いを指定しなくてはならない。

      dt #[+ImportantEntity__Code--YDID contextElement]の追加
      dd.
        #[+ImportantEntity__Code--YDID targetElementSelector]#[+Term--YDID プロパティ]が指定された場合、其れに加えて
          #[+ImportantEntity__Code--YDID contextElement]と言う新規任意#[+Term--YDID プロパティ]を使って、
          対象#[+Term--YDID 要素]が検索される事に成る#[+Term--YDID コンテキスト要素]を指定出来る様に成った。
        #[+ImportantEntity__Code--YDID targetElementSelector]の場合と同じ様に、#[+Term--YDID 要素]のインスタンスを指定するか、
          #[+Term--YDID セレクター]で出来る、但し#[+Term--YDID セレクター]の場合当#[+Term--YDID セレクター]は#[+Keyword--YDID 単一の]
          #[+Term--YDID 要素]に該当していなければいけない、#[+Keyphrase--YDID さもなくばエラーが投げられる]。

      dt.
        #[+ImportantEntity__Code--YDID mustInvokeBeforeChildren_sHandlers]を
          #[+ImportantEntity__Code--YDID eventPropagation]への置き換え
      dd.
        #[+ImportantEntity__Code--YDID eventPropagation]と言う新規#[+Keyword--YDID 多態性の]#[+Term--YDID プロパティ]で
          #[+Term--YDID イベントの伝播]の種類を指定可能だけでなく、#[+Term--YDID イベントの伝播]の無効化も出来る様に成った。
        [+ImportantEntity__Code--YDID capturing]と
          #[+ImportantEntity__Code--YDID eventPropagation: bubbling]と言う
          #[+ImportantEntity__Code--YDID eventPropagation]#[+Term--YDID 列挙]の要素は以前のAPIに比べて分かりにくいと評判される
          かもしれないが、#[+Term--YDID 「capturing」]（#[+Term--YDID DOMツリー]の下降移動）と#[+Term--YDID 「bubbling」]
          （#[+Term--YDID DOMツリー]の上昇移動）は正規的な用語であり、正規的な用語の利用は低品質のAPIとして見做されない。

    dl.Article-DescriptionList

      dt 理由
      dd

        ul.Article-UnorderedList

          li 他#[+Term--YDID 関数]との#[+ImportantEntity--YDID API]の部分的な統一
          li コンテキスト依存の対象#[+Term--YDID 要素]のセレクターを指定する需要
          li イベントの伝搬のもっと柔軟な指定の需要

      dt 貴方のコードが編集が必要に成る条件
      dd

        p.Article-Paragraph.
          単一の#[+Term--YDID 引数]の下記の#[+Term--YDID プロパティ]の中から#[+ImportantEntity--YDID １個以上]利用中

        ul.Article-UnorderedList
          li #[+ImportantEntity__Code--YDID targetElementSelector]
          li #[+ImportantEntity__Code--YDID mustInvokeBeforeChildren_sHandlers]


      dt 対策
      dd

        ul.Article-UnorderedList

          li.
            #[+ImportantEntity__Code--YDID targetElementSelector]#[+Term--YDID プロパティ]を
              #[+ImportantEntity__Code--YDID targetElement]に名前変更の上、#[+Term--YDID セレクター]を含めている
              #[+Term--YDID 文字列リテラル]か、此の#[+Term--YDID リテラル]を含めている#[+Term--YDID 変数]を#[+Term--YDID 子オブジェクト]
              の#[+ImportantEntity__Code--YDID selector]#[+Term--YDID プロパティ]へ移動させてください。
            例えば、#[+SecondaryEntity__Code--YDID targetElementSelector: ".Card-SavingButton"]は
              #[+SecondaryEntity__Code--YDID targetElement: { selector: ".Card-SavingButton"}]に成る。

          li.
            #[+ImportantEntity__Code--YDID mustInvokeBeforeChildren_sHandlers: true]が指定してある場合、
              #[+ImportantEntity__Code--YDID eventPropagation: EventPropagationTypes.capturing]に置き換えて下さい。

          li.
            #[+ImportantEntity__Code--YDID mustInvokeBeforeChildren_sHandlers: true]が指定している場合、
              #[+ImportantEntity__Code--YDID eventPropagation: EventPropagationTypes.bubbling]に置き換えて下さい。

    //-

      h4.Article-Heading4 ページネーション

      ul.Article-UnorderedList

        li: +Link--YDF({
          internalURI: localizedRouting.coreLibrary.$children.
              functionality.$children.
              pagination.$children.
              PaginationCollection.$URI
        }) getItemsOfPaginationPage

        li: +Link--YDF({
          internalURI: localizedRouting.coreLibrary.$children.
              functionality.$children.
              pagination.$children.
              PaginationCollection.$URI
        }) PaginationCollection


      h4.Article-Heading4 文字列の弄り

      ul.Article-UnorderedList

        li: +Link--YDF({
          internalURI: localizedRouting.coreLibrary.$children.functionality.$children.strings.$children.other.cropString.$URI
        }) cropString


      h4.Article-Heading4 ファイルの弄り

      ul.Article-UnorderedList

        li: +Link--YDF({
          internalURI: localizedRouting.coreLibrary.$children.functionality.$children.files.$children.encodeFileToBase64.$URI
        }) encodeFileToBase64


      h3.Article-Heading3 以前のコードの修正が必要になる恐れ有りの変化

      h4.Article-Heading4 ロギング

      h5.Article-Heading5 #[code ILogger]インターフェースの#[code throwErrorAndLog]メソッドの任意化

      p.Article-Paragraph.
        今から、#[+ImportantEntity--YDID Logger]#[+Term--YDID ファサード]が#[+ImportantEntity__Code--YDID throwErrorAndLog]
          #[+Term--YDID メソッド]の実装を見つからなかった場合、此の#[+Term--YDID メソッド]の規定の実装が実行される。

      p.Article-Paragraph.
        #[+ImportantEntity--YDID Logger]#[+Term--YDID クラスは]#[+Keyword__Contrast--YDID 静的メソッド]#[+Keyword--YDID のみ]が有る
          と思い出した上で、#[+ImportantEntity__Code--YDID setImplementation]#[+Term--YDID メソッド]で#[code ILogger]
          #[+Term--YDID インターフェース]の実装を渡すと、#[+Keyphrase--YDID 規定振る舞いの変わりに]#[+ImportantEntity--YDID Logger]
          #[+Term--YDID クラス]の#[+Term--YDID 静的メソッド]は此の実装の#[+Keyword--YDID 同名]の#[+Term--YDID メソッド]を呼び出す事に成る。

      p.Article-Paragraph.
        任意にされた理由としては、エラーの投擲の際、フォーマットする機能が限られた事が普通で、規定のフォーマットが十分な場合も多いので、
          #[+ImportantEntity__Code--YDID throwErrorAndLog]#[+Term--YDID メソッド]の実装が必須だとしたら、
          #[+ImportantEntity--YDID Logger]#[+Term--YDID クラス]での#[+ImportantEntity__Code--YDID throwErrorAndLog]の実装と
          完全に一致している事が多い。
        とはいえ、当メソッドの実装が必要な場合も有り、例えばエラーメッセージ（#[+ImportantEntity--YDID Error]と言う#[+Term--YDID ネイティブクラス]）
          の#[+ImportantEntity__Code--YDID message]#[+Term--YDID フィルド]）を納品モードに於いてブラウザーの開発者専用ツールが使用出来る
          ブラウザーアプリケーションの利用者から隠したい時。


      h5.Article-Heading5 ファサード#[code Logger]の#[code throwErrorAndLog]メソッドに於けるログの詳細度改善

      p.Article-Paragraph.
        今後#[+ImportantEntity__Code--YDID throwErrorAndLog]#[+Term--YDID メソッド]（#[+Keyphrase--YDID 規定実装]）の
          #[+ImportantEntity__Code--YDID ThrownErrorLog]と言う#[+Term--YDID オブジェクト型]の#[+Term--YDID 引数]の
          #[+Term__Contrast--YDID プロパティ]#[+ImportantEntity__Code--YDID title]、
          #[+ImportantEntity__Code--YDID occurrenceLocation]、#[+ImportantEntity__Code--YDID innerError]（指定された場合）と
          #[+ImportantEntity__Code--YDID additionalData]（指定された場合）が#[+ImportantEntity__Code--YDID errorInstance]
          #[+Term--YDID プロパティ]が定義された時だけでなく、代わりに#[+ImportantEntity__Code--YDID errorType]と
          #[+ImportantEntity__Code--YDID description]#[+Term--YDID プロパティ]が定義された時にもメッセージが生成される様に成る。
        #[+Keyword--YDID 二つ目]の場合、#[+ImportantEntity__Code--YDID Error]#[+Term--YDID オブジェクト]が作られ、
          #[+ImportantEntity__Code--YDID throw]で投げられる前に生成されたメッセージが#[+ImportantEntity__Code--YDID message]
          #[+Term--YDID プロパティ]に保存される。


      h5.Article-Heading5 #[code Log]型及び此れの拡大型

      p.Article-Paragraph.
        #[+Term--YDID オブジェクト系]の#[+Term--YDID Log]#[+Term--YDID 型]は下記の#[+Term--YDID 拡大型]を持っていると思い出させておこう。

      ul.Article-UnorderedList
        li #[+ImportantEntity__Code--YDID ErrorLog]
        li #[+ImportantEntity__Code--YDID ThrownErrorLog]
        li #[+ImportantEntity__Code--YDID WarningLog]

      p.Article-Paragraph.
        尚、#[+Keyphrase--YDID 現在のバージョンなら]#[+ImportantEntity__Code--YDID SuccessLog]と#[+ImportantEntity__Code--YDID InfoLog]
          型は#[+Keyword--YDID 完全に]#[+Term--YDID Log]#[+Term--YDID 型]と#[+Keyword__Contrast--YDID 一致]。

      ul.Article-UnorderedList

        li.
          #[+ImportantEntity__Code--YDID compactLayout]と言う#[+Keyword--YDID 任意]#[+Term--YDID 真偽型]の
            #[+Term__Contrast--YDID プロパティ]が追加された。
          #[+ImportantEntity__Code--YDID true]に成っている時、見出し(#[+ImportantEntity__Code--YDID title]#[+Term--YDID プロパティ])ろ
            記述(#[+ImportantEntity__Code--YDID description]#[+Term--YDID 型])の間に開業を無くすと期待されるが、
            #[+Keyphrase--YDID 実際の振る舞いはロガーの実装に依る]。

        li.
          #[+ImportantEntity__Code--YDID mustOutputIf]と言う#[+Keyword--YDID 任意]#[+Term--YDID 真偽型]の
            #[+Term__Contrast--YDID プロパティ]が追加された。
          #[+ImportantEntity__Code--YDID false]に成っている時、出力が発生しないと期待さが、
            #[+Keyphrase--YDID 実際の振る舞いはロガーの実装に依る]。
          但し、ロガーが#[+ImportantEntity--YDID Logger]#[+Term--YDID ファサード]を介して使われている場合、
            #[+ImportantEntity__Code--YDID ILogger]#[+Term--YDID ファサード]の特定実装を関係無く、
            #[+ImportantEntity__Code--YDID mustOutputIf]が#[+ImportantEntity__Code--YDID false]に成っている時、出力が発生しない。


      h3.Article-Heading3 破壊的変更

      h4.Article-Heading4 配列の弄り

